{"version":3,"file":"static/js/123.2fea6cac.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts","../node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts","../node_modules/pixi.js/src/scene/sprite-tiling/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts","../node_modules/pixi.js/src/rendering/renderers/shared/state/State.ts","../node_modules/pixi.js/src/app/ResizePlugin.ts","../node_modules/pixi.js/src/app/TickerPlugin.ts","../node_modules/pixi.js/src/app/init.ts","../node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts","../node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts","../node_modules/pixi.js/src/scene/graphics/init.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts","../node_modules/pixi.js/src/scene/text-bitmap/AbstractBitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/DynamicBitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/utils/getBitmapTextLayout.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapFontManager.ts","../node_modules/pixi.js/src/scene/text-bitmap/utils/resolveCharacters.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts","../node_modules/pixi.js/src/scene/text-bitmap/init.ts","../node_modules/pixi.js/src/scene/text/canvas/BatchableText.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts","../node_modules/pixi.js/src/scene/text/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts","../node_modules/pixi.js/src/scene/mesh/init.ts","../node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts","../node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts","../node_modules/pixi.js/src/filters/FilterPipe.ts","../node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts","../node_modules/pixi.js/src/filters/FilterSystem.ts","../node_modules/pixi.js/src/filters/init.ts","../node_modules/pixi.js/src/scene/particle-container/gl/GlParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/createIndicesForQuads.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleBuffer.ts","../node_modules/pixi.js/src/scene/particle-container/shared/shader/ParticleShader.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GlParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/gpu/GpuParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GpuParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/init.ts","../node_modules/pixi.js/src/scene/text-html/BatchableHTMLText.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts","../node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts","../node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts","../node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts","../node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts","../node_modules/pixi.js/src/utils/browser/isSafari.ts","../node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts","../node_modules/pixi.js/src/scene/text-html/init.ts","../node_modules/pixi.js/src/scene/text/utils/updateTextBounds.ts","../node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts"],"sourcesContent":["/** @internal */\nexport const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\n/** @internal */\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\n/** @internal */\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n","/** @internal */\nexport const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            }\n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\n/** @internal */\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n\n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n\n        `\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\n/**\n * The shader used by the TilingSprite.\n * @internal\n */\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\n/** @internal */\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { TilingSprite } from './TilingSprite';\n\nconst sharedQuad = new QuadGeometry();\n\n/** @internal */\nexport class TilingSpriteGpuData\n{\n    public canBatch: boolean = true;\n    public renderable: TilingSprite;\n    public batchableMesh?: BatchableMesh;\n    public geometry?: MeshGeometry;\n    public shader?: TilingSpriteShader;\n\n    constructor()\n    {\n        this.geometry = new MeshGeometry({\n            indices: sharedQuad.indices.slice(),\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n    }\n\n    public destroy()\n    {\n        this.geometry.destroy();\n        this.shader?.destroy();\n    }\n}\n\n/**\n * The TilingSpritePipe is a render pipe for rendering TilingSprites.\n * It handles the batching and rendering of TilingSprites using a shader.\n * @internal\n */\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private readonly _state: State = State.default2d;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                renderable.texture\n            );\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite.didViewUpdate)\n            {\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.renderable = tilingSprite;\n                batchableMesh.transform = tilingSprite.groupTransform;\n                batchableMesh.setTexture(tilingSprite._texture);\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._getTilingSpriteData(tilingSprite);\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: this._state,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite.didViewUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh._batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite.didViewUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): TilingSpriteGpuData\n    {\n        return renderable._gpuData[this._renderer.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): TilingSpriteGpuData\n    {\n        const gpuData = new TilingSpriteGpuData();\n\n        gpuData.renderable = tilingSprite;\n        tilingSprite._gpuData[this._renderer.uid] = gpuData;\n\n        return gpuData;\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\n/**\n * @param tilingSprite\n * @param uvs\n * @internal\n */\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite.applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\n/**\n * @param array\n * @param stride\n * @param offset\n * @param matrix\n * @internal\n */\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n","import type { TilingSprite } from '../TilingSprite';\n\n/**\n * @param tilingSprite\n * @param positions\n * @internal\n */\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements DefaultBatchableMeshElement\n{\n    public batcherName = 'default';\n\n    public _topology: Topology;\n\n    public readonly packAsQuad = false;\n    public location: number;\n\n    public renderable: ViewContainer;\n\n    public indexOffset = 0;\n    public attributeOffset = 0;\n\n    public texture: Texture;\n    public geometry: MeshGeometry;\n    public transform: Matrix;\n    public roundPixels: 0 | 1 = 0;\n\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n    public _indexStart: number;\n    public _textureId: number;\n    public _textureMatrixUpdateId: number = -1;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    get topology() { return this._topology || this.geometry.topology; }\n    set topology(value: Topology) { this._topology = value; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.geometry = null;\n        this._uvUpdateId = -1;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    /**\n     * Sets the texture for the batchable mesh.\n     * As it does so, it resets the texture matrix update ID.\n     * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n     * @param value - The texture to set.\n     */\n    public setTexture(value: Texture)\n    {\n        if (this.texture === value) return;\n\n        this.texture = value;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    get uvs()\n    {\n        const geometry = this.geometry;\n\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        return transformedUvs as Float32Array;\n    }\n\n    get positions()\n    {\n        return this.geometry.positions;\n    }\n\n    get indices()\n    {\n        return this.geometry.indices;\n    }\n\n    get color()\n    {\n        return this.renderable.groupColorAlpha;\n    }\n\n    get groupTransform()\n    {\n        return this.renderable.groupTransform;\n    }\n\n    get attributeSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n","import type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n    min: 9,\n    max: 10,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link GlStateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @category rendering\n * @advanced\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    /** @internal */\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link ResizePlugin}.\n * These options control how your application handles window and element resizing.\n * @example\n * ```ts\n * // Auto-resize to window\n * await app.init({ resizeTo: window });\n *\n * // Auto-resize to container element\n * await app.init({ resizeTo: document.querySelector('#game') });\n * ```\n * @category app\n * @standard\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @example\n     * ```ts\n     * const app = new Application();\n     * await app.init({\n     *     resizeTo: window, // Resize to the entire window\n     *     // or\n     *     resizeTo: document.querySelector('#game-container'), // Resize to a specific element\n     *     // or\n     *     resizeTo: null, // Disable auto-resize\n     * });\n     * ```\n     * @default null\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality. This plugin handles automatic\n * and manual resizing of your PixiJS application.\n *\n * Adds the following features to {@link Application}:\n * - `resizeTo`: Set an element to automatically resize to\n * - `resize`: Manually trigger a resize\n * - `queueResize`: Queue a resize for the next animation frame\n * - `cancelResize`: Cancel a queued resize\n * @example\n * ```ts\n * import { Application, ResizePlugin } from 'pixi.js';\n *\n * // Create application\n * const app = new Application();\n *\n * // Example 1: Auto-resize to window\n * await app.init({ resizeTo: window });\n *\n * // Example 2: Auto-resize to specific element\n * const container = document.querySelector('#game-container');\n * await app.init({ resizeTo: container });\n *\n * // Example 3: Change resize target at runtime\n * app.resizeTo = window;                    // Enable auto-resize to window\n * app.resizeTo = null;                      // Disable auto-resize\n * ```\n * @category app\n * @standard\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n    /** @internal */\n    public static resizeTo: Window | HTMLElement;\n    /** @internal */\n    public static resize: () => void;\n    /** @internal */\n    public static renderer: ResizeableRenderer;\n    /** @internal */\n    public static queueResize: () => void;\n    /** @internal */\n    public static render: () => void;\n    /** @internal */\n    private static _resizeId: number;\n    /** @internal */\n    private static _resizeTo: Window | HTMLElement;\n    /** @internal */\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link TickerPlugin}.\n * These options control the animation loop and update cycle of your PixiJS application.\n * @example\n * ```ts\n * import { Application } from 'pixi.js';\n *\n * // Basic setup with default options\n * const app = new Application();\n * await app.init({\n *     autoStart: true,     // Start animation loop automatically\n *     sharedTicker: false  // Use dedicated ticker instance\n * });\n *\n * // Advanced setup with shared ticker\n * const app2 = new Application();\n * await app2.init({\n *     autoStart: false,    // Don't start automatically\n *     sharedTicker: true   // Use global shared ticker\n * });\n *\n * // Start animation when ready\n * app2.start();\n * ```\n * @remarks\n * The ticker is the heart of your application's animation system. It:\n * - Manages the render loop\n * - Provides accurate timing information\n * - Handles frame-based updates\n * - Supports priority-based execution order\n * @see {@link Ticker} For detailed ticker functionality\n * @see {@link UPDATE_PRIORITY} For update priority constants\n * @category app\n * @standard\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Controls whether the animation loop starts automatically after initialization.\n     * > [!IMPORTANT]\n     * > Setting this to `false` does NOT stop the shared ticker even if `sharedTicker` is `true`.\n     * > You must stop the shared ticker manually if needed.\n     * @example\n     * ```ts\n     * // Auto-start (default behavior)\n     * await app.init({ autoStart: true });\n     *\n     * // Manual start\n     * await app.init({ autoStart: false });\n     * app.start(); // Start when ready\n     * ```\n     * @default true\n     */\n    autoStart?: boolean;\n\n    /**\n     * Controls whether to use the shared global ticker or create a new instance.\n     *\n     * The shared ticker is useful when you have multiple instances that should sync their updates.\n     * However, it has some limitations regarding update order control.\n     *\n     * Update Order:\n     * 1. System ticker (always runs first)\n     * 2. Shared ticker (if enabled)\n     * 3. App ticker (if using own ticker)\n     * @example\n     * ```ts\n     * // Use shared ticker (global instance)\n     * await app.init({ sharedTicker: true });\n     *\n     * // Use dedicated ticker (default)\n     * await app.init({ sharedTicker: false });\n     *\n     * // Access ticker properties\n     * console.log(app.ticker.FPS);    // Current FPS\n     * console.log(app.ticker.deltaMS); // MS since last update\n     * ```\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link Ticker} functionality. This plugin manages the\n * animation loop and update cycle of your PixiJS application.\n *\n * Adds the following features to {@link Application}:\n * - `ticker`: Access to the application's ticker\n * - `start`: Start the animation loop\n * - `stop`: Stop the animation loop\n * @example\n * ```ts\n * import { Application, TickerPlugin, extensions } from 'pixi.js';\n *\n * // Create application\n * const app = new Application();\n *\n * // Example 1: Basic ticker usage (default autoStart)\n * await app.init({ autoStart: true });      // Starts ticker automatically\n *\n * // Example 2: Manual ticker control\n * await app.init({ autoStart: false });     // Don't start automatically\n * app.start();                              // Start manually\n * app.stop();                               // Stop manually\n *\n * // Example 3: Add custom update logic\n * app.ticker.add((ticker) => {\n *     // Run every frame, delta is the time since last update\n *     sprite.rotation += 0.1 * ticker.deltaTime;\n * });\n *\n * // Example 4: Control update priority\n * import { UPDATE_PRIORITY } from 'pixi.js';\n *\n * app.ticker.add(\n *     (ticker) => {\n *         // Run before normal priority updates\n *     },\n *     null,\n *     UPDATE_PRIORITY.HIGH\n * );\n *\n * // Example 5: One-time update\n * app.ticker.addOnce(() => {\n *     console.log('Runs next frame only');\n * });\n * ```\n * @see {@link Ticker} For detailed ticker functionality\n * @see {@link UPDATE_PRIORITY} For priority constants\n * @category app\n * @standard\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    /** @internal */\n    public static start: () => void;\n    /** @internal */\n    public static stop: () => void;\n    /** @internal */\n    private static _ticker: Ticker;\n    /** @internal */\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        this._ticker = null;\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n","import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n","import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @internal\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n\n    public destroy()\n    {\n        // BOOM!\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { type Renderer } from '../../../rendering/renderers/types';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext } from './GraphicsContextSystem';\n\n/** @internal */\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    contextChange(renderer: Renderer): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\n\n/** @internal */\nexport class GraphicsGpuData\n{\n    public batches: BatchableGraphics[] = [];\n    public batched = false;\n    public destroy()\n    {\n        this.batches.forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this.batches.length = 0;\n    }\n}\n\n/** @internal */\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: Renderer;\n    public state: State = State.for2d();\n\n    private _adaptor: GraphicsAdaptor;\n\n    constructor(renderer: Renderer, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n\n        this.renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._adaptor.contextChange(this.renderer);\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n        const context = graphics.context;\n\n        const wasBatched = !!graphics._gpuData;\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n        if (graphics.didViewUpdate)\n        {\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const gpuData = this._getGpuDataForRenderable(graphics);\n\n        const batches = gpuData.batches;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batch._batcher.updateElement(batch);\n        }\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const gpuData = this._getGpuDataForRenderable(graphics);\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // free up the batches..\n        gpuData.destroy();\n\n        if (gpuContext.isBatchable)\n        {\n            this._updateBatchesForRenderable(graphics, gpuData);\n        }\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getGpuDataForRenderable(graphics).batches;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getGpuDataForRenderable(graphics: Graphics): GraphicsGpuData\n    {\n        return graphics._gpuData[this.renderer.uid] || this._initGpuDataForRenderable(graphics);\n    }\n\n    private _initGpuDataForRenderable(graphics: Graphics): GraphicsGpuData\n    {\n        const gpuData = new GraphicsGpuData();\n\n        graphics._gpuData[this.renderer.uid] = gpuData;\n\n        return gpuData;\n    }\n\n    private _updateBatchesForRenderable(graphics: Graphics, gpuData: GraphicsGpuData)\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        gpuData.batches = gpuContext.batches.map((batch) =>\n        {\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n","// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\n/** @internal */\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */`\n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n\n    }\n};\n\n/** @internal */\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */`\n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n\n    }\n};\n","/** @internal */\nexport const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n\n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n\n            }\n        `,\n    }\n\n};\n\n/** @internal */\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n\n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n            }\n        `,\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\n/** @internal */\nexport class SdfShader extends Shader\n{\n    constructor(maxTextures: number)\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n","import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/**\n * @category text\n * @advanced\n */\nexport interface CharData\n{\n    /** Unique id of character */\n    id: number;\n    /** x-offset to apply when rendering character */\n    xOffset: number;\n    /** y-offset to apply when rendering character. */\n    yOffset: number;\n    /** Advancement to apply to next character. */\n    xAdvance: number;\n    /** The kerning values for this character. */\n    kerning: Record<string, number>;\n    /** The texture of the character. */\n    texture?: Texture;\n}\n\n/**\n * The raw data of a character in a bitmap font.\n * @category text\n * @advanced\n */\nexport interface RawCharData extends Omit<CharData, 'texture'>\n{\n    /** The page of the font texture that the character is on. */\n    page: number;\n    /** The x position of the character in the page. */\n    x: number;\n    /** The y position of the character in the page. */\n    y: number;\n    /** The width of the character in the page. */\n    width: number;\n    /** The height of the character in the page. */\n    height: number;\n    /** The letter of the character. */\n    letter: string;\n}\n\n/**\n * The raw data of a bitmap font.\n * @category text\n * @advanced\n */\nexport interface BitmapFontData\n{\n    /** The offset of the font face from the baseline. */\n    baseLineOffset: number;\n    /** The map of characters by character code. */\n    chars: Record<string, RawCharData>;\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    pages: {\n        /** Unique id for bitmap texture */\n        id: number;\n        /** File name */\n        file: string\n    }[];\n    /** The line-height of the font face in pixels. */\n    lineHeight: number;\n    /** The size of the font face in pixels. */\n    fontSize: number;\n    /** The name of the font face. */\n    fontFamily: string;\n    /** The range and type of the distance field for this font. */\n    distanceField?: {\n        /** Type of distance field */\n        type: 'sdf' | 'msdf' | 'none';\n        /** Range of the distance field in pixels */\n        range: number;\n    };\n}\n\ninterface BitmapFontEvents<Type>\n{\n    destroy: [Type];\n}\n\n/**\n * An abstract representation of a bitmap font.\n * @category text\n * @advanced\n */\nexport abstract class AbstractBitmapFont<FontType>\n    extends EventEmitter<BitmapFontEvents<FontType>>\n    implements Omit<BitmapFontData, 'chars' | 'pages' | 'fontSize'>\n{\n    /** The map of characters by character code. */\n    public readonly chars: Record<string, CharData> = Object.create(null);\n\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    public readonly lineHeight: BitmapFontData['lineHeight'] = 0;\n\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    public readonly fontFamily: BitmapFontData['fontFamily'] = '';\n    /** The metrics of the font face. */\n    public readonly fontMetrics: FontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    public readonly baseLineOffset: BitmapFontData['baseLineOffset'] = 0;\n    /** The range and type of the distance field for this font. */\n    public readonly distanceField: BitmapFontData['distanceField'] = { type: 'none', range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pages: { texture: Texture }[] = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    public applyFillAsTint = true;\n\n    /** The size of the font face in pixels. */\n    public readonly baseMeasurementFontSize: number = 100;\n    protected baseRenderedFontSize = 100;\n\n    /**\n     * The name of the font face.\n     * @deprecated since 8.0.0 Use `fontFamily` instead.\n     */\n    public get font(): BitmapFontData['fontFamily']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.');\n        // #endif\n\n        return this.fontFamily;\n    }\n\n    /**\n     * The map of base page textures (i.e., sheets of glyphs).\n     * @deprecated since 8.0.0 Use `pages` instead.\n     */\n    public get pageTextures(): AbstractBitmapFont<FontType>['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    /**\n     * The size of the font face in pixels.\n     * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n     */\n    public get size(): BitmapFontData['fontSize']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.');\n        // #endif\n\n        return this.fontMetrics.fontSize;\n    }\n\n    /**\n     * The kind of distance field for this font or \"none\".\n     * @deprecated since 8.0.0 Use `distanceField.type` instead.\n     */\n    public get distanceFieldRange(): NonNullable<BitmapFontData['distanceField']>['range']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.');\n        // #endif\n\n        return this.distanceField.range;\n    }\n\n    /**\n     * The range of the distance field in pixels.\n     * @deprecated since 8.0.0 Use `distanceField.range` instead.\n     */\n    public get distanceFieldType(): NonNullable<BitmapFontData['distanceField']>['type']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.');\n        // #endif\n\n        return this.distanceField.type;\n    }\n\n    public destroy(destroyTextures = false): void\n    {\n        this.emit('destroy', this as unknown as FontType);\n\n        this.removeAllListeners();\n\n        for (const i in this.chars)\n        {\n            // texture may not exist if the char is \" \", \\n, \\r, or \\t.\n            this.chars[i].texture?.destroy();\n        }\n\n        (this.chars as null) = null;\n\n        if (destroyTextures)\n        {\n            this.pages.forEach((page) => page.texture.destroy(true));\n            (this.pages as any) = null;\n        }\n    }\n}\n","import { Color } from '../../color/Color';\nimport { Rectangle } from '../../maths/shapes/Rectangle';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle, type TextureStyleOptions } from '../../rendering/renderers/shared/texture/TextureStyle';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle';\nimport { TextStyle } from '../text/TextStyle';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\n\nimport type { ICanvasRenderingContext2D } from '../../environment/canvas/ICanvasRenderingContext2D';\nimport type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/** @internal */\nexport interface DynamicBitmapFontOptions\n{\n    style: TextStyle\n    skipKerning?: boolean\n    resolution?: number\n    padding?: number\n    overrideFill?: boolean\n    overrideSize?: boolean\n    textureSize?: number\n    mipmap?: boolean\n    textureStyle?: TextureStyle | TextureStyleOptions\n}\n\n/**\n * A BitmapFont that generates its glyphs dynamically.\n * @category text\n * @internal\n */\nexport class DynamicBitmapFont extends AbstractBitmapFont<DynamicBitmapFont>\n{\n    public static defaultOptions: DynamicBitmapFontOptions = {\n        textureSize: 512,\n        style: new TextStyle(),\n        mipmap: true,\n    };\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    public resolution = 1;\n    /** The pages of the font. */\n    public override readonly pages: {canvasAndContext?: CanvasAndContext, texture: Texture}[] = [];\n\n    private readonly _padding: number = 0;\n    private readonly _measureCache: Record<string, number> = Object.create(null);\n    private _currentChars: string[] = [];\n    private _currentX = 0;\n    private _currentY = 0;\n    private _currentMaxCharHeight = 0;\n    private _currentPageIndex = -1;\n    private readonly _style: TextStyle;\n    private readonly _skipKerning: boolean = false;\n    private readonly _textureSize: number;\n    private readonly _mipmap: boolean;\n    private readonly _textureStyle?: TextureStyle;\n\n    /**\n     * @param options - The options for the dynamic bitmap font.\n     */\n    constructor(options: DynamicBitmapFontOptions)\n    {\n        super();\n\n        const dynamicOptions = { ...DynamicBitmapFont.defaultOptions, ...options };\n\n        this._textureSize = dynamicOptions.textureSize;\n        this._mipmap = dynamicOptions.mipmap;\n\n        const style = dynamicOptions.style.clone();\n\n        if (dynamicOptions.overrideFill)\n        {\n            // assuming no shape fill..\n            style._fill.color = 0xffffff;\n            style._fill.alpha = 1;\n            style._fill.texture = Texture.WHITE;\n            style._fill.fill = null;\n        }\n\n        this.applyFillAsTint = dynamicOptions.overrideFill;\n\n        const requestedFontSize = style.fontSize;\n\n        // adjust font size to match the base measurement size\n        style.fontSize = this.baseMeasurementFontSize;\n\n        const font = fontStringFromTextStyle(style);\n\n        if (dynamicOptions.overrideSize)\n        {\n            if (style._stroke)\n            {\n                // we want the stroke to fit the size of the requested text, so we need to scale it\n                // accordingly (eg font size 20, with stroke 10 - stroke is 50% of size,\n                // as dynamic font is size 100, the stroke should be adjusted to 50 to make it look right)\n                style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n            }\n        }\n        else\n        {\n            style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n        }\n\n        this._style = style;\n        this._skipKerning = dynamicOptions.skipKerning ?? false;\n        this.resolution = dynamicOptions.resolution ?? 1;\n        this._padding = dynamicOptions.padding ?? 4;\n\n        if (dynamicOptions.textureStyle)\n        {\n            this._textureStyle = dynamicOptions.textureStyle instanceof TextureStyle\n                ? dynamicOptions.textureStyle\n                : new TextureStyle(dynamicOptions.textureStyle);\n        }\n\n        (this.fontMetrics as FontMetrics) = CanvasTextMetrics.measureFont(font);\n        (this.lineHeight as number) = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n    }\n\n    public ensureCharacters(chars: string): void\n    {\n        const charList = CanvasTextMetrics.graphemeSegmenter(chars)\n            .filter((char) => !this._currentChars.includes(char))\n            .filter((char, index, self) => self.indexOf(char) === index);\n        // filter returns..\n\n        if (!charList.length) return;\n\n        this._currentChars = [...this._currentChars, ...charList];\n\n        let pageData;\n\n        if (this._currentPageIndex === -1)\n        {\n            pageData = this._nextPage();\n        }\n        else\n        {\n            pageData = this.pages[this._currentPageIndex];\n        }\n\n        let { canvas, context } = pageData.canvasAndContext;\n        let textureSource = pageData.texture.source;\n\n        const style = this._style;\n\n        let currentX = this._currentX;\n        let currentY = this._currentY;\n        let currentMaxCharHeight = this._currentMaxCharHeight;\n\n        const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n        const padding = this._padding * fontScale;\n\n        let skipTexture = false;\n\n        const maxTextureWidth = canvas.width / this.resolution;\n        const maxTextureHeight = canvas.height / this.resolution;\n\n        for (let i = 0; i < charList.length; i++)\n        {\n            const char = charList[i];\n\n            const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n\n            // override the line height.. we want this to be the glyps height\n            // not the user specified one.\n            metrics.lineHeight = metrics.height;\n\n            const width = metrics.width * fontScale;\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            const height = (metrics.height) * fontScale;\n\n            const paddedWidth = textureGlyphWidth + (padding * 2);\n            const paddedHeight = height + (padding * 2);\n\n            skipTexture = false;\n            // don't let empty characters count towards the maxCharHeight\n            if (char !== '\\n' && char !== '\\r' && char !== '\\t' && char !== ' ')\n            {\n                skipTexture = true;\n                currentMaxCharHeight = Math.ceil(Math.max(paddedHeight, currentMaxCharHeight));\n            }\n\n            if (currentX + paddedWidth > maxTextureWidth)\n            {\n                currentY += currentMaxCharHeight;\n\n                // reset the line x and height..\n                currentMaxCharHeight = paddedHeight;\n                currentX = 0;\n\n                if (currentY + currentMaxCharHeight > maxTextureHeight)\n                {\n                    textureSource.update();\n\n                    const pageData = this._nextPage();\n\n                    canvas = pageData.canvasAndContext.canvas;\n                    context = pageData.canvasAndContext.context;\n                    textureSource = pageData.texture.source;\n\n                    currentX = 0;\n                    currentY = 0;\n                    currentMaxCharHeight = 0;\n                }\n            }\n\n            const xAdvance = (width / fontScale)\n                - (style.dropShadow?.distance ?? 0)\n                - (style._stroke?.width ?? 0);\n\n            // This is in coord space of the measurements.. not the texture\n            this.chars[char] = {\n                id: char.codePointAt(0),\n                xOffset: -this._padding,\n                yOffset: -this._padding,\n                xAdvance,\n                kerning: {},\n            };\n\n            if (skipTexture)\n            {\n                this._drawGlyph(\n                    context,\n                    metrics,\n                    currentX + padding,\n                    currentY + padding,\n                    fontScale,\n                    style,\n                );\n\n                const px = textureSource.width * fontScale;\n                const py = textureSource.height * fontScale;\n\n                const frame = new Rectangle(\n                    ((currentX) / px) * textureSource.width,\n                    ((currentY) / py) * textureSource.height,\n                    ((paddedWidth) / px) * textureSource.width,\n                    ((paddedHeight) / py) * textureSource.height,\n                );\n\n                this.chars[char].texture = new Texture({\n                    source: textureSource,\n                    frame,\n                });\n\n                currentX += Math.ceil(paddedWidth);\n            }\n        }\n\n        textureSource.update();\n\n        this._currentX = currentX;\n        this._currentY = currentY;\n        this._currentMaxCharHeight = currentMaxCharHeight;\n\n        // now apply kerning..\n        this._skipKerning && this._applyKerning(charList, context);\n    }\n\n    /**\n     * @deprecated since 8.0.0\n     * The map of base page textures (i.e., sheets of glyphs).\n     */\n    public override get pageTextures(): DynamicBitmapFont['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    private _applyKerning(newChars: string[], context: ICanvasRenderingContext2D): void\n    {\n        const measureCache = this._measureCache;\n\n        for (let i = 0; i < newChars.length; i++)\n        {\n            const first = newChars[i];\n\n            for (let j = 0; j < this._currentChars.length; j++)\n            {\n                // first go through new char being first\n                const second = this._currentChars[j];\n\n                let c1 = measureCache[first];\n\n                if (!c1) c1 = measureCache[first] = context.measureText(first).width;\n\n                let c2 = measureCache[second];\n\n                if (!c2) c2 = measureCache[second] = context.measureText(second).width;\n\n                let total = context.measureText(first + second).width;\n                let amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[first].kerning[second] = amount;\n                }\n\n                // then go through new char being second\n                total = context.measureText(first + second).width;\n                amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[second].kerning[first] = amount;\n                }\n            }\n        }\n    }\n\n    private _nextPage(): {canvasAndContext: CanvasAndContext, texture: Texture}\n    {\n        this._currentPageIndex++;\n\n        const textureResolution = this.resolution;\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n            this._textureSize,\n            this._textureSize,\n            textureResolution\n        );\n\n        this._setupContext(canvasAndContext.context, this._style, textureResolution);\n\n        const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n        const texture = new Texture({\n            source: new ImageSource({\n                resource: canvasAndContext.canvas,\n                resolution,\n                alphaMode: 'premultiply-alpha-on-upload',\n                autoGenerateMipmaps: this._mipmap,\n            }),\n\n        });\n\n        if (this._textureStyle)\n        {\n            texture.source.style = this._textureStyle;\n        }\n\n        const pageData = {\n            canvasAndContext,\n            texture,\n        };\n\n        this.pages[this._currentPageIndex] = pageData;\n\n        return pageData;\n    }\n\n    // canvas style!\n    private _setupContext(context: ICanvasRenderingContext2D, style: TextStyle, resolution: number): void\n    {\n        style.fontSize = this.baseRenderedFontSize;\n        context.scale(resolution, resolution);\n        context.font = fontStringFromTextStyle(style);\n        style.fontSize = this.baseMeasurementFontSize;\n        context.textBaseline = style.textBaseline;\n\n        const stroke = style._stroke;\n        const strokeThickness = stroke?.width ?? 0;\n\n        if (stroke)\n        {\n            context.lineWidth = strokeThickness;\n            context.lineJoin = stroke.join;\n            context.miterLimit = stroke.miterLimit;\n\n            // TODO prolly cache this??\n            context.strokeStyle = getCanvasFillStyle(stroke, context);\n        }\n\n        if (style._fill)\n        {\n            // set canvas text styles\n            context.fillStyle = getCanvasFillStyle(style._fill, context);\n        }\n\n        if (style.dropShadow)\n        {\n            const shadowOptions = style.dropShadow;\n            const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n\n            const dropShadowBlur = shadowOptions.blur * resolution;\n            const dropShadowDistance = shadowOptions.distance * resolution;\n\n            context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n            context.shadowBlur = dropShadowBlur;\n            context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n            context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n        }\n        else\n        {\n            context.shadowColor = 'black';\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n    }\n\n    private _drawGlyph(\n        context: ICanvasRenderingContext2D,\n        metrics: CanvasTextMetrics,\n        x: number,\n        y: number,\n        fontScale: number,\n        style: TextStyle\n    ): void\n    {\n        const char = metrics.text;\n        const fontProperties = metrics.fontProperties;\n        const stroke = style._stroke;\n\n        const strokeThickness = (stroke?.width ?? 0) * fontScale;\n\n        const tx = x + (strokeThickness / 2);\n        const ty = y - (strokeThickness / 2);\n\n        const descent = fontProperties.descent * fontScale;\n        const lineHeight = metrics.lineHeight * fontScale;\n\n        let removeShadow = false;\n\n        if (style.stroke && strokeThickness)\n        {\n            removeShadow = true;\n            context.strokeText(char, tx, ty + lineHeight - descent);\n        }\n\n        const { shadowBlur, shadowOffsetX, shadowOffsetY } = context;\n\n        if (style._fill)\n        {\n            if (removeShadow)\n            {\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n            context.fillText(char, tx, ty + lineHeight - descent);\n        }\n\n        if (removeShadow)\n        {\n            context.shadowBlur = shadowBlur;\n            context.shadowOffsetX = shadowOffsetX;\n            context.shadowOffsetY = shadowOffsetY;\n        }\n    }\n\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { canvasAndContext, texture } = this.pages[i];\n\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n}\n","import type { TextStyle } from '../../text/TextStyle';\nimport type { AbstractBitmapFont } from '../AbstractBitmapFont';\n\n/**\n * The layout data for a bitmap text.\n * This contains the width, height, scale, offsetY and lines of text.\n * Each line contains its width, character positions, characters, space width and spaces index.\n * @category text\n * @internal\n */\nexport interface BitmapTextLayoutData\n{\n    width: number;\n    height: number;\n    scale: number;\n    offsetY: number;\n    lines: {\n        width: number\n        charPositions: number[],\n        chars: string[],\n        // / spaces: number\n        spaceWidth: number\n        spacesIndex: number[]\n    }[];\n}\n\n/**\n * @param chars\n * @param style\n * @param font\n * @param trimEnd\n * @internal\n */\nexport function getBitmapTextLayout(\n    chars: string[],\n    style: TextStyle,\n    font: AbstractBitmapFont<any>,\n    trimEnd: boolean\n): BitmapTextLayoutData\n{\n    const layoutData: BitmapTextLayoutData = {\n        width: 0,\n        height: 0,\n        offsetY: 0,\n        scale: style.fontSize / font.baseMeasurementFontSize,\n        lines: [{\n            width: 0,\n            charPositions: [] as number[],\n            spaceWidth: 0,\n            spacesIndex: [],\n            chars: [],\n        }]\n    };\n\n    layoutData.offsetY = font.baseLineOffset;\n\n    let currentLine = layoutData.lines[0];\n\n    let previousChar: string = null;\n    let firstWord = true;\n    //    let spaceCount = 0;\n\n    const currentWord = {\n        spaceWord: false,\n        width: 0,\n        start: 0,\n        index: 0, // use index to not modify the array as we use it a lot!\n        positions: [] as number[],\n        chars: [] as string[],\n    };\n\n    const scale = font.baseMeasurementFontSize / style.fontSize;\n\n    const adjustedLetterSpacing = style.letterSpacing * scale;\n    const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n    const adjustedLineHeight = style.lineHeight ? style.lineHeight * scale : font.lineHeight;\n\n    const breakWords = style.wordWrap && style.breakWords;\n\n    const nextWord = (word: typeof currentWord) =>\n    {\n        const start = currentLine.width;\n\n        for (let j = 0; j < currentWord.index; j++)\n        {\n            const position = word.positions[j];\n\n            currentLine.chars.push(word.chars[j]);\n            currentLine.charPositions.push(position + start);\n        }\n\n        currentLine.width += word.width;\n\n        firstWord = false;\n\n        // reset the word..\n        currentWord.width = 0;\n        currentWord.index = 0;\n        currentWord.chars.length = 0;\n\n        // spaceCount = 0;\n    };\n\n    const nextLine = () =>\n    {\n        let index = currentLine.chars.length - 1;\n\n        if (trimEnd)\n        {\n            let lastChar = currentLine.chars[index];\n\n            while (lastChar === ' ')\n            {\n                currentLine.width -= font.chars[lastChar].xAdvance;\n                lastChar = currentLine.chars[--index];\n            }\n        }\n\n        layoutData.width = Math.max(layoutData.width, currentLine.width);\n\n        currentLine = {\n            width: 0,\n            charPositions: [],\n            chars: [],\n            spaceWidth: 0,\n            spacesIndex: [],\n        };\n\n        firstWord = true;\n        layoutData.lines.push(currentLine);\n        layoutData.height += adjustedLineHeight;\n    };\n\n    const checkIsOverflow = (lineWidth: number) =>\n        lineWidth - adjustedLetterSpacing > adjustedWordWrapWidth;\n\n    // loop an extra time to force a line break..\n    for (let i = 0; i < chars.length + 1; i++)\n    {\n        let char: string;\n\n        const isEnd = i === chars.length;\n\n        if (!isEnd)\n        {\n            char = chars[i];\n        }\n\n        const charData = font.chars[char] || font.chars[' '];\n\n        const isSpace = (/(?:\\s)/).test(char);\n        const isWordBreak = isSpace || char === '\\r' || char === '\\n' || isEnd;\n\n        // spaceCount++;\n        // wasSpace = isSpace;\n\n        if (isWordBreak)\n        {\n            const addWordToNextLine = !firstWord && style.wordWrap && checkIsOverflow(currentLine.width + currentWord.width);\n\n            if (addWordToNextLine)\n            {\n                nextLine();\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n            else\n            {\n                currentWord.start = currentLine.width;\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                nextLine();\n            }\n            else if (!isEnd)\n            {\n                const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n\n                currentLine.width += spaceWidth;\n\n                currentLine.spaceWidth = spaceWidth;\n                currentLine.spacesIndex.push(currentLine.charPositions.length);\n                currentLine.chars.push(char);\n\n                // spaceCount++;\n            }\n        }\n        else\n        {\n            const kerning = charData.kerning[previousChar] || 0;\n\n            const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n\n            const addWordToNextLine = breakWords && checkIsOverflow(currentLine.width + currentWord.width + nextCharWidth);\n\n            if (addWordToNextLine)\n            {\n                nextWord(currentWord);\n                nextLine();\n            }\n\n            currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n            currentWord.chars.push(char);\n\n            currentWord.width += nextCharWidth;\n        }\n\n        previousChar = char;\n        // lastChar = char;\n    }\n\n    nextLine();\n\n    if (style.align === 'center')\n    {\n        alignCenter(layoutData);\n    }\n    else if (style.align === 'right')\n    {\n        alignRight(layoutData);\n    }\n    else if (style.align === 'justify')\n    {\n        alignJustify(layoutData);\n    }\n\n    return layoutData;\n}\n\nfunction alignCenter(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width / 2) - (line.width / 2));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignRight(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width) - (line.width));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignJustify(measurementData: BitmapTextLayoutData)\n{\n    const width = measurementData.width;\n\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n\n        let indy = 0;\n        let spaceIndex = line.spacesIndex[indy++];\n\n        let offset = 0;\n\n        const totalSpaces = line.spacesIndex.length;\n\n        const newSpaceWidth = (width - line.width) / totalSpaces;\n\n        const spaceWidth = newSpaceWidth;\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            if (j === spaceIndex)\n            {\n                spaceIndex = line.spacesIndex[indy++];\n\n                offset += spaceWidth;\n            }\n\n            line.charPositions[j] += offset;\n        }\n    }\n}\n","import { lru } from 'tiny-lru';\nimport { Cache } from '../../assets/cache/Cache';\nimport { type TextureStyle, type TextureStyleOptions } from '../../rendering/renderers/shared/texture/TextureStyle';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { warn } from '../../utils/logging/warn';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\nlet fontCount = 0;\n\n/**\n * The options for installing a new BitmapFont. Once installed, the font will be available\n * for use in BitmapText objects through the fontFamily property of TextStyle.\n * @example\n * ```ts\n * import { BitmapFont, BitmapText } from 'pixi.js';\n *\n * // Basic font installation\n * BitmapFont.install({\n *     name: 'BasicFont',\n *     style: {\n *         fontFamily: 'Arial',\n *         fontSize: 24,\n *         fill: '#ffffff'\n *     }\n * });\n *\n * // Advanced font installation\n * BitmapFont.install({\n *     name: 'AdvancedFont',\n *     style: {\n *         fontFamily: 'Arial',\n *         fontSize: 32,\n *         fill: '#ff0000',\n *         stroke: { color: '#000000', width: 2 }\n *     },\n *     // Include specific character ranges\n *     chars: [\n *         ['a', 'z'],           // lowercase letters\n *         ['A', 'Z'],           // uppercase letters\n *         ['0', '9'],           // numbers\n *         '!@#$%^&*()_+-=[]{}' // symbols\n *     ],\n *     resolution: 2,            // High-DPI support\n *     padding: 4,              // Glyph padding\n *     skipKerning: false,      // Enable kerning\n *     textureStyle: {\n *         scaleMode: 'linear',\n *     }\n * });\n *\n * // Using the installed font\n * const text = new BitmapText({\n *     text: 'Hello World',\n *     style: {\n *         fontFamily: 'AdvancedFont',\n *         fontSize: 48\n *     }\n * });\n * ```\n * @category text\n * @standard\n */\nexport interface BitmapFontInstallOptions\n{\n    /**\n     * The name of the font. This will be used as the fontFamily in text styles to access this font.\n     * Must be unique across all installed bitmap fonts.\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'MyCustomFont',\n     *     style: { fontFamily: 'Arial' }\n     * });\n     * ```\n     */\n    name?: string;\n\n    /**\n     * Characters included in the font set. You can specify individual characters or ranges.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     * @example\n     * ```ts\n     * // Different ways to specify characters\n     * BitmapFont.install({\n     *     name: 'RangeFont',\n     *     chars: [\n     *         ['a', 'z'],              // Range of characters\n     *         '0123456789',            // String of characters\n     *         [['0', '9'], ['A', 'Z']] // Multiple ranges\n     *     ]\n     * });\n     * ```\n     */\n    chars?: string | (string | string[])[];\n\n    /**\n     * Render resolution for glyphs. Higher values create sharper text at the cost of memory.\n     * Useful for supporting high-DPI displays.\n     * @default 1\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'HiDPIFont',\n     *     resolution: window.devicePixelRatio || 2\n     * });\n     * ```\n     */\n    resolution?: number;\n\n    /**\n     * Padding between glyphs on texture atlas. Balances visual quality with texture space.\n     * - Lower values: More compact, but may have visual artifacts\n     * - Higher values: Better quality, but uses more texture space\n     * @default 4\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'PaddedFont',\n     *     padding: 8 // More padding for better quality\n     * });\n     * ```\n     */\n    padding?: number;\n\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * - true: Faster generation, but text may have inconsistent spacing\n     * - false: Better text appearance, but slower generation\n     * @default false\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'FastFont',\n     *     skipKerning: true // Prioritize performance\n     * });\n     * ```\n     */\n    skipKerning?: boolean;\n\n    /**\n     * Style options to render the BitmapFont with.\n     * Supports all TextStyle properties including fill, stroke, and shadow effects.\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'StyledFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 32,\n     *         fill: 'white',\n     *         stroke: { color: '#000000', width: 2 },\n     *         dropShadow: {\n     *             color: '#000000',\n     *             blur: 2,\n     *             distance: 3\n     *         }\n     *     }\n     * });\n     * ```\n     */\n    style?: TextStyle | TextStyleOptions;\n\n    /**\n     * Optional texture style to use when creating the font textures.\n     * Controls how the font textures are rendered and filtered.\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'CrispFont',\n     *     textureStyle: {\n     *         scaleMode: 'nearest',\n     *     }\n     * });\n     * ```\n     */\n    textureStyle?: TextureStyle | TextureStyleOptions;\n\n    /**\n     * Whether to allow overriding the fill color with a tint at runtime.\n     *\n     * When enabled, the font can be dynamically tinted using the `tint` property of BitmapText,\n     * allowing a single font to display multiple colors without creating separate font textures.\n     * This is memory efficient but requires the font to be rendered with white fill color.\n     *\n     * When disabled, the fill color is permanently baked into the font texture. This allows\n     * any fill color but prevents runtime tinting - each color variation requires a separate font.\n     * @default false (automatically determined based on style)\n     *\n     * **Requirements for tinting:**\n     * - Fill color must be white (`0xFFFFFF` or `'#ffffff'`)\n     * - No stroke effects\n     * - No drop shadows (or only black shadows)\n     * - No gradient or pattern fills\n     *\n     * **Performance considerations:**\n     * - ✅ Enabled: One font texture, multiple colors via tinting (memory efficient)\n     * - ❌ Disabled: Separate font texture per color (higher memory usage)\n     * @example\n     * ```ts\n     * // Correct usage - white fill with tinting enabled\n     * BitmapFont.install({\n     *     name: 'TintableFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 24,\n     *         fill: 0xFFFFFF  // Must be white for tinting\n     *     },\n     *     dynamicFill: true\n     * });\n     *\n     * // Use the font with different colors via tinting\n     * const redText = new BitmapText({\n     *     text: 'Red Text',\n     *     style: { fontFamily: 'TintableFont', fill: 'red }, // Red tint\n     * });\n     *\n     * const blueText = new BitmapText({\n     *     text: 'Blue Text',\n     *     style: { fontFamily: 'TintableFont', fill: 'blue' }, // Blue tint\n     * });\n     * ```\n     * @example\n     * ```ts\n     * // Incorrect usage - colored fill with tinting enabled\n     * BitmapFont.install({\n     *     name: 'BadTintFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 24,\n     *         fill: 0xFF0000  // ❌ Red fill won't tint properly\n     *     },\n     *     dynamicFill: true  // ❌ Will not work as expected\n     * });\n     * ```\n     * @example\n     * ```ts\n     * // Alternative - baked colors (no tinting)\n     * BitmapFont.install({\n     *     name: 'BakedColorFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 24,\n     *         fill: 0xFF0000,  // Any color works\n     *         stroke: { color: 0x000000, width: 2 }  // Strokes allowed\n     *     },\n     *     dynamicFill: false  // Color is baked in\n     * });\n     * ```\n     */\n    dynamicFill?: boolean;\n}\n\n/** @advanced */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @type {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n        textureStyle: null,\n    };\n\n    /** Cache for measured text layouts to avoid recalculating them multiple times. */\n    public readonly measureCache = lru<BitmapTextLayoutData>(1000);\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill && !style._stroke)\n        {\n            fontFamilyKey += style._fill.fill.styleKey;\n            overrideFill = false;\n        }\n        else if (style._stroke || style.dropShadow)\n        {\n            // if there is a stoke, we need to use the style key as this the font generated cannot be tinted\n            // due to the fact the font has at least two colors.\n            fontFamilyKey = `${style.styleKey}-bitmap`;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const styleCopy = Object.create(style);\n\n            // Override the lineHeight, let the BitmapFont calculate the lineHeight\n            // from the fontMetrics instead using a custom lineHeight from BitmapText parameter\n            styleCopy.lineHeight = 0;\n\n            const fnt = new DynamicBitmapFont({\n                style: styleCopy,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fontCount++;\n\n            // warn users if they have created too many dynamic fonts\n            if (fontCount > 50)\n            {\n                // eslint-disable-next-line max-len\n                warn('BitmapText', `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n            }\n\n            fnt.once('destroy', () =>\n            {\n                fontCount--;\n                Cache.remove(fontFamilyKey);\n            });\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public getLayout(text: string, style: TextStyle, trimEnd: boolean = true): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        const id = `${text}-${style.styleKey}-${trimEnd}`;\n\n        // Check if we have a cached layout\n        if (this.measureCache.has(id))\n        {\n            return this.measureCache.get(id);\n        }\n\n        const segments = CanvasTextMetrics.graphemeSegmenter(text);\n\n        // Generate the layout data\n        const layoutData = getBitmapTextLayout(segments, style, bitmapFont, trimEnd);\n\n        this.measureCache.set(id, layoutData);\n\n        return layoutData;\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public measureText(\n        text: string,\n        style: TextStyle,\n        trimEnd: boolean = true\n    ): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style, trimEnd);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = options.dynamicFill ?? this._canUseTintForStyle(style);\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false,\n            textureStyle: options.textureStyle,\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            font.destroy();\n        }\n    }\n\n    /**\n     * Determines if a style can use tinting instead of baking colors into the bitmap.\n     * Tinting is more efficient as it allows reusing the same bitmap with different colors.\n     * @param style - The text style to evaluate\n     * @returns true if the style can use tinting, false if colors must be baked in\n     * @private\n     */\n    private _canUseTintForStyle(style: TextStyle): boolean\n    {\n        // Exclude strokes, non black shadows and ensure\n        // we have a non gradient or pattern fill,\n        // and the fill color is white\n        return !style._stroke\n            && (!style.dropShadow || style.dropShadow.color === 0x000000)\n            && !style._fill.fill\n            && style._fill.color === 0xFFFFFF;\n    }\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @category text\n * @advanced\n * @class\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nexport const BitmapFontManager = new BitmapFontManagerClass();\n","/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Skip unexpected 'empty set' check at end\n    if (chars === '')\n    {\n        return [];\n    }\n\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n            if (item[0].length === 0 || item[1].length === 0)\n            {\n                throw new Error('[BitmapFont]: Invalid character delimiter.');\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        else\n        {\n            result.push(...Array.from(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n","import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { BitmapText } from './BitmapText';\n\n/** @internal */\nexport class BitmapTextGraphics extends Graphics\n{\n    public destroy()\n    {\n        if (this.context.customShader)\n        {\n            this.context.customShader.destroy();\n        }\n\n        super.destroy();\n    }\n}\n\n/** @internal */\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                // TODO: Check if this is a WebGL renderer before asserting type\n                context.customShader = new SdfShader(this._renderer.limits.maxBatchableTextures);\n            }\n        }\n\n        const chars = CanvasTextMetrics.graphemeSegmenter(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        let tx = bitmapTextLayout.width;\n        let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n\n        if (style._stroke)\n        {\n            tx += style._stroke.width / scale;\n            ty += style._stroke.width / scale;\n        }\n\n        context\n            .translate((-bitmapText._anchor._x * tx) - padding, (-bitmapText._anchor._y * ty) - padding)\n            .scale(scale, scale);\n\n        const tint = bitmapFont.applyFillAsTint ? style._fill.color : 0xFFFFFF;\n\n        let fontSize = bitmapFont.fontMetrics.fontSize;\n        let lineHeight = bitmapFont.lineHeight;\n\n        if (style.lineHeight)\n        {\n            fontSize = style.fontSize / scale;\n            lineHeight = style.lineHeight / scale;\n        }\n\n        let linePositionYShift = (lineHeight - fontSize) / 2;\n\n        // if `currentY` is no longer starts from `baseLineOffset`\n        // the `baseLineOffset` below may also need to be removed\n        if (linePositionYShift - bitmapFont.baseLineOffset < 0)\n        {\n            linePositionYShift = 0;\n        }\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = line.chars[j];\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    const texture = charData.texture;\n\n                    context.texture(\n                        texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset + linePositionYShift),\n                        texture.orig.width,\n                        texture.orig.height,\n                    );\n                }\n            }\n\n            currentY += lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return bitmapText._gpuData[this._renderer.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that has the same style!\n        const proxyRenderable = new BitmapTextGraphics();\n\n        bitmapText._gpuData[this._renderer.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        return proxyRenderable;\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe);\n","import { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Text } from '../Text';\n\n/** @internal */\nexport class BatchableText extends BatchableSprite\n{\n    private readonly _renderer: Renderer;\n    public currentKey: string;\n\n    constructor(renderer: Renderer)\n    {\n        super();\n\n        // Next step is to make canvasTextSystem a GLOBAL object.\n        // so this is ok for now..\n        this._renderer = renderer;\n\n        renderer.runners.resolutionChange.add(this);\n    }\n\n    public resolutionChange()\n    {\n        const text = this.renderable as Text;\n\n        if (text._autoResolution)\n        {\n            text.onViewUpdate();\n        }\n    }\n\n    public destroy()\n    {\n        const { canvasText } = this._renderer;\n        const refCount = canvasText.getReferenceCount(this.currentKey);\n\n        if (refCount > 0)\n        {\n            canvasText.decreaseReferenceCount(this.currentKey);\n        }\n        else if (this.texture)\n        {\n            canvasText.returnTexture(this.texture);\n        }\n\n        this._renderer.runners.resolutionChange.remove(this);\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateTextBounds } from '../utils/updateTextBounds';\nimport { BatchableText } from './BatchableText';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Text } from '../Text';\n\n/** @internal */\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text.styleKey;\n\n        if (gpuText.currentKey !== newKey) return true;\n\n        return text._didTextUpdate;\n    }\n\n    public addRenderable(text: Text, instructionSet: InstructionSet)\n    {\n        const batchableText = this._getGpuText(text);\n\n        if (text._didTextUpdate)\n        {\n            const resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n\n            if (batchableText.currentKey !== text.styleKey || text.resolution !== resolution)\n            {\n                // If the text has changed, we need to update the GPU text\n                this._updateGpuText(text);\n            }\n            text._didTextUpdate = false;\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableText, instructionSet);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const batchableText = this._getGpuText(text);\n\n        batchableText._batcher.updateElement(batchableText);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const batchableText = this._getGpuText(text);\n\n        if (batchableText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(batchableText.currentKey);\n        }\n\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n\n        batchableText.texture = this._renderer.canvasText.getManagedTexture(text);\n        batchableText.currentKey = text.styleKey;\n\n        updateTextBounds(batchableText, text);\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return text._gpuData[this._renderer.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const batchableText = new BatchableText(this._renderer);\n\n        batchableText.currentKey = '--';\n        batchableText.renderable = text;\n        batchableText.transform = text.groupTransform;\n        batchableText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableText.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        text._gpuData[this._renderer.uid] = batchableText;\n\n        return batchableText;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { type Filter } from '../../../filters/Filter';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { TextureStyle } from '../../../rendering/renderers/shared/texture/TextureStyle';\nimport { deprecation } from '../../../utils/logging/deprecation';\nimport { type CanvasTextOptions, type Text } from '../Text';\nimport { TextStyle } from '../TextStyle';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextGenerator } from './CanvasTextGenerator';\n\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @category rendering\n * @advanced\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    private readonly _activeTextures: Record<string, {\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    constructor(_renderer: Renderer)\n    {\n        this._renderer = _renderer;\n    }\n\n    /** @deprecated since 8.0.0 */\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string): Texture;\n    /**\n     * This is a function that will create a texture from a text string, style and resolution.\n     * Useful if you want to make a texture of your text and use if for various other pixi things!\n     * @param options - The options of the text that will be used to generate the texture.\n     * @param options.text - the text to render\n     * @param options.style - the style of the text\n     * @param options.resolution - the resolution of the texture\n     * @returns the newly created texture\n     */\n    public getTexture(options: CanvasTextOptions): Texture;\n    public getTexture(\n        options: CanvasTextOptions | string,\n        _resolution?: number,\n        _style?: TextStyle,\n        _textKey?: string\n    ): Texture\n    {\n        if (typeof options === 'string')\n        {\n            // #if _DEBUG\n            deprecation('8.0.0', 'CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments');\n            // #endif\n\n            options = {\n                text: options,\n                style: _style,\n                resolution: _resolution,\n            };\n        }\n\n        if (!(options.style instanceof TextStyle))\n        {\n            options.style = new TextStyle(options.style);\n        }\n\n        if (!(options.textureStyle instanceof TextureStyle))\n        {\n            options.textureStyle = new TextureStyle(options.textureStyle);\n        }\n\n        if (typeof options.text !== 'string')\n        {\n            options.text = options.text.toString();\n        }\n\n        const { text, style, textureStyle } = options;\n\n        const resolution = options.resolution ?? this._renderer.resolution;\n\n        const { frame, canvasAndContext } = CanvasTextGenerator.getCanvasAndContext({\n            text: text as string,\n            style: style as TextStyle,\n            resolution,\n        });\n\n        const texture = getPo2TextureFromSource(canvasAndContext.canvas, frame.width, frame.height, resolution);\n\n        if (textureStyle) texture.source.style = textureStyle as TextureStyle;\n\n        if (style.trim)\n        {\n            // reapply the padding to the frame\n            frame.pad(style.padding);\n            texture.frame.copyFrom(frame);\n\n            // We initially increased the frame size by a resolution factor\n            // to achieve a crisper display. Now we need to scale down the already\n            // trimmed frame to render the texture in the expected size.\n            texture.frame.scale(1 / resolution);\n            texture.updateUvs();\n        }\n\n        if (style.filters)\n        {\n            // apply the filters to the texture if required..\n            // this returns a new texture with the filters applied\n            const filteredTexture = this._applyFilters(texture, style.filters as Filter[]);\n\n            // return the original texture to the pool so we can reuse the next frame\n            this.returnTexture(texture);\n\n            CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n\n            // return the new texture with the filters applied\n            return filteredTexture;\n        }\n\n        this._renderer.texture.initSource(texture._source);\n\n        CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n\n        return texture;\n    }\n\n    /**\n     * Returns a texture that was created wit the above `getTexture` function.\n     * Handy if you are done with a texture and want to return it to the pool.\n     * @param texture - The texture to be returned.\n     */\n    public returnTexture(texture: Texture)\n    {\n        const source = texture.source;\n\n        source.resource = null;\n        source.uploadMethodId = 'unknown';\n        source.alphaMode = 'no-premultiply-alpha';\n\n        TexturePool.returnTexture(texture, true);\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     * @deprecated since 8.10.0\n     */\n    public renderTextToCanvas(): void\n    {\n        // #if _DEBUG\n        deprecation(\n            '8.10.0',\n            'CanvasTextSystem.renderTextToCanvas: no longer supported, use CanvasTextSystem.getTexture instead'\n        );\n        // #endif\n    }\n\n    /**\n     * Gets or creates a managed texture for a Text object. This method handles texture reuse and reference counting.\n     * @param text - The Text object that needs a texture\n     * @returns A Texture instance that represents the rendered text\n     * @remarks\n     * This method performs the following:\n     * 1. Sets the appropriate resolution based on auto-resolution settings\n     * 2. Checks if a texture already exists for the text's style\n     * 3. Creates a new texture if needed or returns an existing one\n     * 4. Manages reference counting for texture reuse\n     */\n    public getManagedTexture(text: Text)\n    {\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        const textKey = text.styleKey;\n\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        const texture = this.getTexture({\n            text: text.text,\n            style: text.style,\n            resolution: text._resolution,\n            textureStyle: text.textureStyle,\n        });\n\n        this._activeTextures[textKey] = {\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    /**\n     * Decreases the reference count for a texture associated with a text key.\n     * When the reference count reaches zero, the texture is returned to the pool.\n     * @param textKey - The unique key identifying the text style configuration\n     * @remarks\n     * This method is crucial for memory management, ensuring textures are properly\n     * cleaned up when they are no longer needed by any Text instances.\n     */\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            this.returnTexture(activeTexture.texture);\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    /**\n     * Gets the current reference count for a texture associated with a text key.\n     * @param textKey - The unique key identifying the text style configuration\n     * @returns The number of Text instances currently using this texture\n     */\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey]?.usageCount ?? 0;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    /**\n     * Applies the specified filters to the given texture.\n     *\n     * This method takes a texture and a list of filters, applies the filters to the texture,\n     * and returns the resulting texture. It also ensures that the alpha mode of the resulting\n     * texture is set to 'premultiplied-alpha'.\n     * @param {Texture} texture - The texture to which the filters will be applied.\n     * @param {Filter[]} filters - The filters to apply to the texture.\n     * @returns {Texture} The resulting texture after all filters have been applied.\n     */\n    private _applyFilters(texture: Texture, filters: Filter[]): Texture\n    {\n        // Save the current render target so it can be restored later\n        const currentRenderTarget = this._renderer.renderTarget.renderTarget;\n\n        // Apply the filters to the texture and get the resulting texture\n        const resultTexture = this._renderer.filter.generateFilteredTexture({\n            texture,\n            filters,\n        });\n\n        // Set the alpha mode of the resulting texture to 'premultiplied-alpha'\n\n        // Restore the previous render target\n        this._renderer.renderTarget.bind(currentRenderTarget, false);\n\n        // Return the resulting texture with the filters applied\n        return resultTexture;\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n        // Clean up active textures\n        for (const key in this._activeTextures)\n        {\n            if (this._activeTextures[key]) this.returnTexture(this._activeTextures[key].texture);\n        }\n        (this._activeTextures as null) = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { type GPUData } from '../../view/ViewContainer';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\n/**\n * GPUData for Mesh\n * @internal\n */\nexport class MeshGpuData implements GPUData\n{\n    public meshData?: MeshData;\n    public batchableMesh?: BatchableMesh;\n\n    public destroy()\n    {\n        // BOOM!\n    }\n}\n\n/**\n * The data for the mesh\n * @internal\n */\ninterface MeshData\n{\n    /** if the mesh is batched or not */\n    batched: boolean;\n    /** the size of the index buffer */\n    indexSize: number;\n    /** the size of the vertex buffer */\n    vertexSize: number;\n}\n\n/** @internal */\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\n/**\n * The MeshPipe is responsible for handling the rendering of Mesh objects.\n * It manages the batching of meshes, updates their GPU data, and executes the rendering instructions.\n * It also handles the local uniforms for each mesh, such as transformation matrices and colors.\n * @category scene\n * @internal\n */\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<Mesh>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _adaptor: MeshAdaptor;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            if (batchableMesh.texture.uid !== mesh._texture.uid)\n            {\n                batchableMesh._textureMatrixUpdateId = -1;\n            }\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                mesh._texture\n            );\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const meshData = this._getMeshData(mesh);\n\n        if (mesh.didViewUpdate)\n        {\n            meshData.indexSize = mesh._geometry.indices?.length;\n            meshData.vertexSize = mesh._geometry.positions?.length;\n        }\n\n        if (meshData.batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.setTexture(mesh._texture);\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add(mesh);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.setTexture(mesh._texture);\n\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public execute(mesh: Mesh)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        mesh._gpuData[this.renderer.uid] ||= new MeshGpuData();\n\n        return mesh._gpuData[this.renderer.uid].meshData || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        mesh._gpuData[this.renderer.uid].meshData = {\n            batched: mesh.batched,\n            indexSize: 0,\n            vertexSize: 0,\n        };\n\n        return mesh._gpuData[this.renderer.uid].meshData;\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        mesh._gpuData[this.renderer.uid] ||= new MeshGpuData();\n\n        return mesh._gpuData[this.renderer.uid].batchableMesh || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = new BatchableMesh();\n\n        gpuMesh.renderable = mesh;\n        gpuMesh.setTexture(mesh._texture);\n        gpuMesh.transform = mesh.groupTransform;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        mesh._gpuData[this.renderer.uid].batchableMesh = gpuMesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n","import { type ImageLike } from '../../../environment/ImageLike';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n * @internal\n */\nexport function getPo2TextureFromSource(\n    image: ImageLike | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link PlaneGeometry}\n * @category scene\n * @advanced\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @category scene\n * @advanced\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { type PointData } from '../../maths/point/PointData';\nimport { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\n\n/**\n * Options for the NineSliceGeometry.\n * @category scene\n * @advanced\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n\n    /** The anchor point of the NineSliceSprite. */\n    anchor?: PointData\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @category scene\n * @advanced\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    /** @internal */\n    public _leftWidth: number;\n    /** @internal */\n    public _rightWidth: number;\n    /** @internal */\n    public _topHeight: number;\n    /** @internal */\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n    private _anchorX: any;\n    private _anchorY: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this._anchorX = options.anchor?.x;\n        this._anchorY = options.anchor?.y;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const p = this.positions;\n        const {\n            width,\n            height,\n            _leftWidth,\n            _rightWidth,\n            _topHeight,\n            _bottomHeight,\n            _anchorX,\n            _anchorY,\n        } = this;\n\n        const w = _leftWidth + _rightWidth;\n        const scaleW = width > w ? 1.0 : width / w;\n\n        const h = _topHeight + _bottomHeight;\n        const scaleH = height > h ? 1.0 : height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        const anchorOffsetX = _anchorX * width;\n        const anchorOffsetY = _anchorY * height;\n\n        p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n        p[2] = p[10] = p[18] = p[26] = (_leftWidth * scale) - anchorOffsetX;\n        p[4] = p[12] = p[20] = p[28] = width - (_rightWidth * scale) - anchorOffsetX;\n        p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n\n        p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n        p[9] = p[11] = p[13] = p[15] = (_topHeight * scale) - anchorOffsetY;\n        p[17] = p[19] = p[21] = p[23] = height - (_bottomHeight * scale) - anchorOffsetY;\n        p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\n/**\n * GPU data for NineSliceSprite.\n * @internal\n */\nexport class NineSliceSpriteGpuData extends BatchableMesh\n{\n    constructor()\n    {\n        super();\n        this.geometry = new NineSliceGeometry();\n    }\n\n    public destroy()\n    {\n        this.geometry.destroy();\n    }\n}\n\n/**\n * The NineSliceSpritePipe is a render pipe for rendering NineSliceSprites.\n * @internal\n */\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(sprite: NineSliceSprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        return !gpuSprite._batcher.checkAndUpdateTexture(\n            gpuSprite,\n            sprite._texture\n        );\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.setTexture(sprite._texture);\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): NineSliceSpriteGpuData\n    {\n        return sprite._gpuData[this._renderer.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): NineSliceSpriteGpuData\n    {\n        const gpuData = sprite._gpuData[this._renderer.uid] = new NineSliceSpriteGpuData();\n\n        const batchableMesh = gpuData;\n\n        batchableMesh.renderable = sprite;\n        batchableMesh.transform = sprite.groupTransform;\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        // if the sprite has not been updated by the view, we need to update the batchable mesh now.\n        if (!sprite.didViewUpdate)\n        {\n            this._updateBatchableSprite(sprite, batchableMesh);\n        }\n\n        return gpuData;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\n/** @internal */\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import { Matrix } from '../../../maths';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\n/**\n * This matrix is used for calculations of the bounds for renderables placed inside cacheAsTexture render groups.\n * @ignore\n * @internal\n */\nconst tempProjectionMatrix: Matrix = new Matrix();\n\n/**\n * @param renderables\n * @param bounds\n * @internal\n */\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const actualMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n\n        if (renderGroup?.isCachedAsTexture)\n        {\n            bounds.matrix = tempProjectionMatrix.copyFrom(renderGroup.textureOffsetInverseTransform)\n                .append(renderable.worldTransform);\n        }\n        else if (renderGroup?._parentCacheAsTextureRenderGroup)\n        {\n            bounds.matrix = tempProjectionMatrix\n                .copyFrom(renderGroup._parentCacheAsTextureRenderGroup.inverseWorldTransform)\n                .append(renderable.groupTransform);\n        }\n        else\n        {\n            bounds.matrix = renderable.worldTransform;\n        }\n\n        bounds.addBounds(renderable.bounds);\n    }\n\n    bounds.matrix = actualMatrix;\n\n    return bounds;\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { type Rectangle } from '../maths/shapes/Rectangle';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n * @internal\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: 'pushFilter' | 'popFilter',\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\n/**\n * Class representing the data required for applying filters.\n * This class holds various properties that are used during the filter application process.\n * @internal\n */\nclass FilterData\n{\n    /**\n     * Indicates whether the filter should be skipped.\n     * @type {boolean}\n     */\n    public skip = false;\n\n    /**\n     * The texture to which the filter is applied.\n     * @type {Texture}\n     */\n    public inputTexture: Texture = null;\n\n    /**\n     * The back texture used for blending, if required.\n     * @type {Texture | null}\n     */\n    public backTexture?: Texture = null;\n\n    /**\n     * The list of filters to be applied.\n     * @type {Filter[]}\n     */\n    public filters: Filter[] = null;\n\n    /**\n     * The bounds of the filter area.\n     * @type {Bounds}\n     */\n    public bounds = new Bounds();\n\n    /**\n     * The container to which the filter is applied.\n     * @type {Container}\n     */\n    public container: Container = null;\n\n    /**\n     * Indicates whether blending is required for the filter.\n     * @type {boolean}\n     */\n    public blendRequired: boolean = false;\n\n    /**\n     * The render surface where the output of the filter is rendered.\n     * @type {RenderSurface}\n     */\n    public outputRenderSurface: RenderSurface = null;\n\n    /**\n     * The global frame of the filter area.\n     * @type {{ x: number, y: number, width: number, height: number }}\n     */\n    public globalFrame = { x: 0, y: 0, width: 0, height: 0 };\n\n    /**\n     * Indicates whether antialiasing is enabled for the filter.\n     * @type {boolean}\n     */\n    public antialias: boolean;\n\n    /**\n     * The resolution of the filter.\n     * @type {number}\n     */\n    public resolution: number;\n}\n\n/**\n * System that manages the filter pipeline\n * @category rendering\n * @advanced\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    /**\n     * Pushes a filter instruction onto the filter stack.\n     * @param instruction - The instruction containing the filter effect and container.\n     * @internal\n     */\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._pushFilterData();\n\n        filterData.skip = false;\n\n        filterData.filters = filters as Filter[];\n        filterData.container = instruction.container;\n        filterData.outputRenderSurface = renderer.renderTarget.renderSurface;\n\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n\n        const rootResolution = colorTextureSource.resolution;\n        const rootAntialias = colorTextureSource.antialias;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds = filterData.bounds;\n\n        this._calculateFilterArea(instruction, bounds);\n\n        this._calculateFilterBounds(filterData, renderer.renderTarget.rootViewPort, rootAntialias, rootResolution, 1);\n\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        const previousFilterData = this._getPreviousFilterData();\n\n        const globalResolution = this._findFilterResolution(rootResolution);\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (previousFilterData)\n        {\n            offsetX = previousFilterData.bounds.minX;\n            offsetY = previousFilterData.bounds.minY;\n        }\n\n        this._calculateGlobalFrame(\n            filterData,\n            offsetX, offsetY,\n            globalResolution,\n            colorTextureSource.width,\n            colorTextureSource.height\n        );\n\n        // set all the filter data\n\n        this._setupFilterTextures(filterData, bounds, renderer, previousFilterData);\n    }\n\n    /**\n     * Applies filters to a texture.\n     *\n     * This method takes a texture and a list of filters, applies the filters to the texture,\n     * and returns the resulting texture.\n     * @param {object} params - The parameters for applying filters.\n     * @param {Texture} params.texture - The texture to apply filters to.\n     * @param {Filter[]} params.filters - The filters to apply.\n     * @returns {Texture} The resulting texture after all filters have been applied.\n     * @example\n     *\n     * ```ts\n     * // Create a texture and a list of filters\n     * const texture = new Texture(...);\n     * const filters = [new BlurFilter(), new ColorMatrixFilter()];\n     *\n     * // Apply the filters to the texture\n     * const resultTexture = filterSystem.applyToTexture({ texture, filters });\n     *\n     * // Use the resulting texture\n     * sprite.texture = resultTexture;\n     * ```\n     *\n     * Key Points:\n     * 1. padding is not currently supported here - so clipping may occur with filters that use padding.\n     * 2. If all filters are disabled or skipped, the original texture is returned.\n     */\n    public generateFilteredTexture({ texture, filters }: {texture: Texture, filters: Filter[]}): Texture\n    {\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._pushFilterData();\n\n        this._activeFilterData = filterData;\n        filterData.skip = false;\n\n        filterData.filters = filters;\n\n        const colorTextureSource = texture.source;\n\n        const rootResolution = colorTextureSource.resolution;\n        const rootAntialias = colorTextureSource.antialias;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return texture;\n        }\n\n        const bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n\n        bounds.addRect(texture.frame);\n\n        this._calculateFilterBounds(filterData, bounds.rectangle, rootAntialias, rootResolution, 0);\n\n        if (filterData.skip)\n        {\n            return texture;\n        }\n\n        const globalResolution = rootResolution;\n        const offsetX = 0;\n        const offsetY = 0;\n\n        this._calculateGlobalFrame(\n            filterData,\n            offsetX, offsetY,\n            globalResolution,\n            colorTextureSource.width,\n            colorTextureSource.height\n        );\n\n        /// /////////\n\n        // set all the filter data\n        // get a P02 texture from our pool...\n        filterData.outputRenderSurface = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            filterData.resolution,\n            filterData.antialias,\n        );\n\n        filterData.backTexture = Texture.EMPTY;\n\n        /// ///\n        // bind...\n        // TODO this might need looking at for padding!\n        filterData.inputTexture = texture;\n\n        /// ////////////// PART 2 POP //////////////////////\n\n        const renderer = this.renderer;\n\n        // TODO required? check with AA\n        renderer.renderTarget.finishRenderPass();\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n        this._applyFiltersToTexture(filterData, true);\n\n        const outputTexture = filterData.outputRenderSurface as Texture;\n\n        outputTexture.source.alphaMode = 'premultiplied-alpha';\n\n        return outputTexture;\n    }\n\n    /** @internal */\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._popFilterData();\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        renderer.globalUniforms.pop();\n\n        renderer.renderTarget.finishRenderPass();\n\n        this._activeFilterData = filterData;\n\n        this._applyFiltersToTexture(filterData, false);\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(filterData.backTexture);\n        }\n\n        // return the texture to the pool so we can reuse the next frame\n        TexturePool.returnTexture(filterData.inputTexture);\n    }\n\n    /**\n     * Copies the last render surface to a texture.\n     * @param lastRenderSurface - The last render surface to copy from.\n     * @param bounds - The bounds of the area to copy.\n     * @param previousBounds - The previous bounds to use for offsetting the copy.\n     */\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    /**\n     * Applies a filter to a texture.\n     * @param filter - The filter to apply.\n     * @param input - The input texture.\n     * @param output - The output render surface.\n     * @param clear - Whether to clear the output surface before applying the filter.\n     */\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._activeFilterData;\n\n        const outputRenderSurface = filterData.outputRenderSurface;\n\n        const isFinalTarget = outputRenderSurface === output;\n\n        // Find the correct resolution by looking back through the filter stack\n        const rootResolution = renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n        const resolution = this._findFilterResolution(rootResolution);\n\n        // Calculate the offset for both outputFrame and globalFrame\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (isFinalTarget)\n        {\n            const offset = this._findPreviousFilterOffset();\n\n            offsetX = offset.x;\n            offsetY = offset.y;\n        }\n\n        this._updateFilterUniforms(input, output, filterData, offsetX, offsetY, resolution, isFinalTarget, clear);\n\n        this._setupBindGroupsAndRender(filter, input, renderer);\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n\n        if (renderGroup && renderGroup.cacheToLocalTransform)\n        {\n            // get the matrix relative to the render group..\n            worldTransform.prepend(renderGroup.cacheToLocalTransform);\n        }\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.orig.width,\n            1.0 / sprite.texture.orig.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy(): void\n    {\n        // BOOM!\n    }\n\n    /**\n     * Sets up the bind groups and renders the filter.\n     * @param filter - The filter to apply\n     * @param input - The input texture\n     * @param renderer - The renderer instance\n     */\n    private _setupBindGroupsAndRender(filter: Filter, input: Texture, renderer: Renderer): void\n    {\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(this._filterGlobalUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(this._filterGlobalUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    /**\n     * Sets up the filter textures including input texture and back texture if needed.\n     * @param filterData - The filter data to update\n     * @param bounds - The bounds for the texture\n     * @param renderer - The renderer instance\n     * @param previousFilterData - The previous filter data for back texture calculation\n     */\n    private _setupFilterTextures(\n        filterData: FilterData,\n        bounds: Bounds,\n        renderer: Renderer,\n        previousFilterData: FilterData | null\n    ): void\n    {\n        // set all the filter data\n        filterData.backTexture = Texture.EMPTY;\n\n        /// ///\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            filterData.resolution,\n            filterData.antialias,\n        );\n\n        // Very cryptic, but important(!) moment.\n        //\n        // If we try to pull texture from the pool for backTexture before inputTexture,\n        // it will be unbounded later by startRenderPass. It happens because in such a case - the current backTexture\n        // is actually inputTexture from the previous filter application (check `pop` method).\n        //\n        // So maintaining the order (inputTexture -> backTexture) helps us to prevent unwanted texture unbinding.\n        if (filterData.blendRequired)\n        {\n            renderer.renderTarget.finishRenderPass();\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.outputRenderSurface);\n\n            filterData.backTexture = this.getBackTexture(renderTarget, bounds, previousFilterData?.bounds);\n        }\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n\n        // set the global uniforms to take into account the bounds offset required\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    /**\n     * Calculates and sets the global frame for the filter.\n     * @param filterData - The filter data to update\n     * @param offsetX - The X offset\n     * @param offsetY - The Y offset\n     * @param globalResolution - The global resolution\n     * @param sourceWidth - The source texture width\n     * @param sourceHeight - The source texture height\n     */\n    private _calculateGlobalFrame(\n        filterData: FilterData,\n        offsetX: number,\n        offsetY: number,\n        globalResolution: number,\n        sourceWidth: number,\n        sourceHeight: number\n    ): void\n    {\n        const globalFrame = filterData.globalFrame;\n\n        globalFrame.x = offsetX * globalResolution;\n        globalFrame.y = offsetY * globalResolution;\n        globalFrame.width = sourceWidth * globalResolution;\n        globalFrame.height = sourceHeight * globalResolution;\n    }\n\n    /**\n     * Updates the filter uniforms with the current filter state.\n     * @param input - The input texture\n     * @param output - The output render surface\n     * @param filterData - The current filter data\n     * @param offsetX - The X offset for positioning\n     * @param offsetY - The Y offset for positioning\n     * @param resolution - The current resolution\n     * @param isFinalTarget - Whether this is the final render target\n     * @param clear - Whether to clear the output surface\n     */\n    private _updateFilterUniforms(\n        input: Texture,\n        output: RenderSurface,\n        filterData: FilterData,\n        offsetX: number,\n        offsetY: number,\n        resolution: number,\n        isFinalTarget: boolean,\n        clear: boolean\n    ): void\n    {\n        const uniforms = this._filterGlobalUniforms.uniforms;\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            outputFrame[0] = filterData.bounds.minX - offsetX;\n            outputFrame[1] = filterData.bounds.minY - offsetY;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offsetX * resolution;\n        globalFrame[1] = offsetY * resolution;\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // we are going to overwrite resource we can set it to null!\n        if (output instanceof Texture) output.source.resource = null;\n\n        // set the output texture - this is where we are going to render to\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        this.renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n\n        this._filterGlobalUniforms.update();\n    }\n\n    /**\n     * Finds the correct resolution by looking back through the filter stack.\n     * @param rootResolution - The fallback root resolution to use\n     * @returns The resolution from the previous filter or root resolution\n     */\n    private _findFilterResolution(rootResolution: number): number\n    {\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        return currentIndex > 0 && this._filterStack[currentIndex].inputTexture\n            ? this._filterStack[currentIndex].inputTexture.source._resolution\n            : rootResolution;\n    }\n\n    /**\n     * Finds the offset from the previous non-skipped filter in the stack.\n     * @returns The offset coordinates from the previous filter\n     */\n    private _findPreviousFilterOffset(): { x: number, y: number }\n    {\n        let offsetX = 0;\n        let offsetY = 0;\n        let lastIndex = this._filterStackIndex;\n\n        while (lastIndex > 0)\n        {\n            lastIndex--;\n            const prevFilterData = this._filterStack[lastIndex];\n\n            if (!prevFilterData.skip)\n            {\n                offsetX = prevFilterData.bounds.minX;\n                offsetY = prevFilterData.bounds.minY;\n                break;\n            }\n        }\n\n        return { x: offsetX, y: offsetY };\n    }\n\n    /**\n     * Calculates the filter area bounds based on the instruction type.\n     * @param instruction - The filter instruction\n     * @param bounds - The bounds object to populate\n     */\n    private _calculateFilterArea(instruction: FilterInstruction, bounds: Bounds): void\n    {\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            // we want to factor render layers to get the real visual bounds of this container.\n            // so the last param is true..\n            instruction.container.getFastGlobalBounds(true, bounds);\n        }\n\n        if (instruction.container)\n        {\n            // When a container is cached as a texture, its filters need to be applied relative to its\n            // cached parent's coordinate space rather than world space. This transform adjustment ensures\n            // filters are applied in the correct coordinate system.\n            const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n            const filterFrameTransform = renderGroup.cacheToLocalTransform;\n\n            if (filterFrameTransform)\n            {\n                bounds.applyMatrix(filterFrameTransform);\n            }\n        }\n    }\n\n    private _applyFiltersToTexture(filterData: FilterData, clear: boolean)\n    {\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        const filters = filterData.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(filterData.backTexture.source, 3);\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            filters[0].apply(this, inputTexture, filterData.outputRenderSurface, clear);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            const tempTexture = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            // get another texture that we will render the next filter too\n            let flop = tempTexture;\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.outputRenderSurface, clear);\n\n            // return those textures for later!\n            TexturePool.returnTexture(tempTexture);\n        }\n    }\n\n    private _calculateFilterBounds(\n        filterData: FilterData,\n        viewPort: Rectangle,\n        rootAntialias: boolean,\n        rootResolution: number,\n        // a multiplier padding for the bounds calculation\n        // this prop is used when applying filters to textures\n        // as the should have padding applied to them already (until we fix padding when applying them to textures)\n        // set to 0 to remove padding from the bounds calculation\n        paddingMultiplier: number\n    )\n    {\n        const renderer = this.renderer;\n\n        const bounds = filterData.bounds;\n        const filters = filterData.filters;\n\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = Infinity;\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for all filter, it should be true, and otherwise false\n        let antialias = true;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n        // false if any filter in the list has false\n        let clipToViewport = true;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution === 'inherit'\n                ? rootResolution : filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias === 'off')\n            {\n                antialias = false;\n            }\n            else if (filter.antialias === 'inherit')\n            {\n                antialias &&= rootAntialias;\n            }\n\n            if (!filter.clipToViewport)\n            {\n                clipToViewport = false;\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired ||= filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        if (clipToViewport)\n        {\n            bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n        }\n\n        // round the bounds to the nearest pixel\n        bounds\n            .scale(resolution)\n            .ceil()\n            .scale(1 / resolution)\n            .pad((padding | 0) * paddingMultiplier);\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set the global frame to the root texture\n\n        // get previous bounds.. we must take into account skipped filters also..\n\n        // // to find the previous resolution we need to account for the skipped filters\n        // // the following will find the last non skipped filter...\n\n        // store the values that will be used to apply the filters\n        filterData.antialias = antialias;\n        filterData.resolution = resolution;\n        filterData.blendRequired = blendRequired;\n    }\n\n    private _popFilterData(): FilterData\n    {\n        this._filterStackIndex--;\n\n        return this._filterStack[this._filterStackIndex];\n    }\n\n    private _getPreviousFilterData(): FilterData | null\n    {\n        let previousFilterData: FilterData;\n\n        let index = this._filterStackIndex - 1;\n\n        while (index > 0)\n        {\n            index--;\n            previousFilterData = this._filterStack[index];\n\n            if (!previousFilterData.skip)\n            {\n                break;\n            }\n        }\n\n        return previousFilterData;\n    }\n\n    private _pushFilterData(): FilterData\n    {\n        let filterData = this._filterStack[this._filterStackIndex];\n\n        if (!filterData)\n        {\n            filterData = this._filterStack[this._filterStackIndex] = new FilterData();\n        }\n\n        this._filterStackIndex++;\n\n        return filterData;\n    }\n}\n\n","import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n","import type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\n/** @internal */\nexport class GlParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const state = particleContainerPipe.state;\n        const renderer = particleContainerPipe.renderer as WebGLRenderer;\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.resources.uTexture = container.texture._source;\n        shader.resources.uniforms = particleContainerPipe.localUniforms;\n\n        const gl = renderer.gl;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        // now lets upload and render the buffers..\n        renderer.shader.bind(shader);\n        renderer.state.set(state);\n        renderer.geometry.bind(buffer.geometry, shader.glProgram);\n\n        const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n        const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n        gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n    }\n}\n","/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n * @internal\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer ||= new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer ||= new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n","import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\n/** @internal */\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\n/**\n * @param properties\n * @internal\n */\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n\n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\nimport type { ParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\n/**\n * Options for creating a ParticleBuffer.\n * @internal\n */\nexport interface ParticleBufferOptions\n{\n    /** The size of the particle buffer, defaults to 1000. */\n    size: number;\n    /** A record of attributes that the particle container uses. */\n    properties: Record<string, ParticleRendererProperty>;\n}\n\n/**\n * The ParticleBuffer holds the buffers and geometry for a particle container.\n * It also contains the upload functions for the static and dynamic properties.\n * @internal\n */\nexport class ParticleBuffer\n{\n    /** The buffer containing static attribute data for all elements in the batch. */\n    public staticAttributeBuffer: ViewableBuffer;\n    /** The buffer containing dynamic attribute data for all elements in the batch. */\n    public dynamicAttributeBuffer: ViewableBuffer;\n\n    private readonly _staticBuffer: Buffer;\n    private readonly _dynamicBuffer: Buffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    private readonly _dynamicStride: number;\n    private readonly _staticStride: number;\n\n    /** The geometry of the particle buffer. */\n    public readonly geometry: Geometry;\n\n    private _size = 0;\n    private readonly _dynamicUpload: ParticleUpdateFunction;\n    private readonly _staticUpload: ParticleUpdateFunction;\n    private readonly _generateParticleUpdateCache: Record<string, {\n        dynamicUpdate: ParticleUpdateFunction;\n        staticUpdate: ParticleUpdateFunction;\n    }> = {};\n\n    constructor(options: ParticleBufferOptions)\n    {\n        // size in sprites!\n        const size = this._size = options.size ?? 1000;\n\n        // TODO add the option to specify what is dynamic!\n        const properties = options.properties;\n\n        // in bytes!\n        let staticVertexSize = 0;\n        let dynamicVertexSize = 0;\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                // dynamic.\n                dynamicVertexSize += attributeInfo.stride;\n            }\n            else\n            {\n                // static.\n                staticVertexSize += attributeInfo.stride;\n            }\n        }\n\n        this._dynamicStride = dynamicVertexSize / 4;\n        this._staticStride = staticVertexSize / 4;\n\n        this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n        this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n\n        this.indexBuffer = createIndicesForQuads(size);\n\n        // build geometry..\n\n        const geometry = new Geometry();\n\n        let dynamicOffset = 0;\n        let staticOffset = 0;\n\n        this._staticBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'static-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        this._dynamicBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'dynamic-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._dynamicBuffer,\n                    stride: this._dynamicStride * 4,\n                    offset: dynamicOffset * 4,\n                    format: property.format,\n                });\n                dynamicOffset += attributeInfo.size;\n            }\n            else\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._staticBuffer,\n                    stride: this._staticStride * 4,\n                    offset: staticOffset * 4,\n                    format: property.format,\n                });\n                staticOffset += attributeInfo.size;\n            }\n        }\n\n        geometry.addIndex(this.indexBuffer);\n\n        const uploadFunction = this.getParticleUpdate(properties);\n\n        this._dynamicUpload = uploadFunction.dynamicUpdate;\n        this._staticUpload = uploadFunction.staticUpdate;\n\n        this.geometry = geometry;\n    }\n\n    public getParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        const key = getParticleSyncKey(properties);\n\n        if (this._generateParticleUpdateCache[key])\n        {\n            return this._generateParticleUpdateCache[key];\n        }\n\n        this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n\n        return this._generateParticleUpdateCache[key];\n    }\n\n    public generateParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        return generateParticleUpdateFunction(properties);\n    }\n\n    public update(particles: IParticle[], uploadStatic: boolean)\n    {\n        // first resize the buffers if needed!\n        // TODO resize!\n        if (particles.length > this._size)\n        {\n            uploadStatic = true;\n\n            this._size = Math.max(particles.length, (this._size * 1.5) | 0);\n\n            this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n            this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n            this.indexBuffer = createIndicesForQuads(this._size);\n\n            this.geometry.indexBuffer.setDataWithSize(\n                this.indexBuffer, this.indexBuffer.byteLength, true);\n        }\n\n        const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n\n        this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n\n        this._dynamicBuffer.setDataWithSize(\n            this.dynamicAttributeBuffer.float32View, particles.length * this._dynamicStride * 4, true);\n\n        if (uploadStatic)\n        {\n            const staticAttributeBuffer = this.staticAttributeBuffer;\n\n            this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n\n            this._staticBuffer.setDataWithSize(\n                staticAttributeBuffer.float32View, particles.length * this._staticStride * 4, true);\n        }\n    }\n\n    public destroy()\n    {\n        this._staticBuffer.destroy();\n        this._dynamicBuffer.destroy();\n        this.geometry.destroy();\n    }\n}\n\nfunction getParticleSyncKey(properties: Record<string, ParticleRendererProperty>)\n{\n    const keyGen: string[] = [];\n\n    for (const key in properties)\n    {\n        const property = properties[key];\n\n        keyGen.push(key, property.code, property.dynamic ? 'd' : 's');\n    }\n\n    return keyGen.join('_');\n}\n\n","import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\nimport wgsl from './particles.wgsl';\n\n/** @internal */\nexport class ParticleShader extends Shader\n{\n    constructor()\n    {\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment\n        });\n\n        const gpuProgram = GpuProgram.from({\n            fragment: {\n                source: wgsl,\n                entryPoint: 'mainFragment'\n            },\n            vertex: {\n                source: wgsl,\n                entryPoint: 'mainVertex'\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                // this will be replaced with the texture from the particle container\n                uTexture: Texture.WHITE.source,\n                // this will be replaced with the texture style from the particle container\n                uSampler: new TextureStyle({}),\n                // this will be replaced with the local uniforms from the particle container\n                uniforms: {\n                    uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Color(0xFFFFFF), type: 'vec4<f32>' },\n                    uRound: { value: 1, type: 'f32' },\n                    uResolution: { value: [0, 0], type: 'vec2<f32>' },\n                }\n            }\n        });\n    }\n}\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport { ParticleShader } from './shader/ParticleShader';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { ParticleContainer } from './ParticleContainer';\n\n/** @internal */\nexport interface ParticleContainerAdaptor\n{\n    execute(particleContainerPop: ParticleContainerPipe, container: ParticleContainer): void;\n}\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @category scene\n * @internal\n */\nexport class ParticleContainerPipe implements RenderPipe<ParticleContainer>\n{\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public defaultShader: Shader;\n\n    /** @internal */\n    public adaptor: ParticleContainerAdaptor;\n    /** @internal */\n    public readonly state = State.for2d();\n    /** @internal */\n    public readonly renderer: Renderer;\n\n    /** Local uniforms that are used for rendering particles. */\n    public readonly localUniforms = new UniformGroup({\n        uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uRound: { value: 1, type: 'f32' },\n        uResolution: { value: [0, 0], type: 'vec2<f32>' },\n    });\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     * @param adaptor\n     */\n    constructor(renderer: Renderer, adaptor: ParticleContainerAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n\n        this.defaultShader = new ParticleShader();\n\n        this.state = State.for2d();\n    }\n\n    public validateRenderable(_renderable: ParticleContainer): boolean\n    {\n        // always fine :D\n        return false;\n    }\n\n    public addRenderable(renderable: ParticleContainer, instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderable);\n    }\n\n    public getBuffers(renderable: ParticleContainer): ParticleBuffer\n    {\n        return renderable._gpuData[this.renderer.uid] || this._initBuffer(renderable);\n    }\n\n    private _initBuffer(renderable: ParticleContainer): ParticleBuffer\n    {\n        renderable._gpuData[this.renderer.uid] = new ParticleBuffer({\n            size: renderable.particleChildren.length,\n            properties: renderable._properties,\n        });\n\n        return renderable._gpuData[this.renderer.uid];\n    }\n\n    public updateRenderable(_renderable: ParticleContainer)\n    {\n        // nothing to be done here!\n\n    }\n\n    public execute(container: ParticleContainer): void\n    {\n        const children = container.particleChildren;\n\n        if (children.length === 0)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n        const buffer = this.getBuffers(container);\n\n        container.texture ||= children[0].texture;\n\n        const state = this.state;\n\n        buffer.update(children, container._childrenDirty);\n        container._childrenDirty = false;\n\n        state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n\n        const uniforms = this.localUniforms.uniforms;\n\n        const transformationMatrix = uniforms.uTranslationMatrix;\n\n        container.worldTransform.copyTo(transformationMatrix);\n\n        transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n\n        uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n        uniforms.uRound = renderer._roundPixels | container._roundPixels;\n\n        color32BitToUniform(\n            container.groupColorAlpha,\n            uniforms.uColor,\n            0\n        );\n\n        this.adaptor.execute(this, container);\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        (this.renderer as null) = null;\n        if (this.defaultShader)\n        {\n            this.defaultShader.destroy();\n            this.defaultShader = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\n\n/**\n * WebGL renderer for Particles that is designed for speed over feature set.\n * @category scene\n * @internal\n */\nexport class GlParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer, new GlParticleContainerAdaptor());\n    }\n}\n","import type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\n/** @internal */\nexport class GpuParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const renderer = particleContainerPipe.renderer as WebGPURenderer;\n\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n\n        shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n\n        const state = particleContainerPipe.state;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        renderer.encoder.draw({\n            geometry: buffer.geometry,\n            shader: container.shader || particleContainerPipe.defaultShader,\n            state,\n            size: container.particleChildren.length * 6,\n        });\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\n\n/**\n * WebGPU renderer for Particles that is designed for speed over feature set.\n * @category scene\n * @internal\n */\nexport class GpuParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer, new GpuParticleContainerAdaptor());\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe';\n\n// NOTE: this is the first occurrence of needing both gl and gpu pipes in the same file\n// This could cause some issues with tree shaking in the future.\n// Right now these two files do not import anything specific for a renderer, so is not an issue for now.\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n","import { type Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { HTMLText } from './HTMLText';\n\n/**\n * The BatchableHTMLText class extends the BatchableSprite class and is used to handle HTML text rendering.\n * It includes a promise for the texture as generating the HTML texture takes some time.\n * @internal\n */\nexport class BatchableHTMLText extends BatchableSprite\n{\n    private readonly _renderer: Renderer;\n    public texturePromise: Promise<Texture>;\n    public generatingTexture = false;\n    public currentKey: string = '--';\n\n    /**\n     * Creates an instance of BatchableHTMLText.\n     * @param renderer - The renderer instance to be used.\n     */\n    constructor(renderer: Renderer)\n    {\n        super();\n\n        // Next step is to make canvasTextSystem a GLOBAL object.\n        // so this is ok for now..\n        this._renderer = renderer;\n\n        renderer.runners.resolutionChange.add(this);\n    }\n\n    /** Handles resolution changes for the HTML text. If the text has auto resolution enabled, it triggers a view update. */\n    public resolutionChange()\n    {\n        const text = this.renderable as HTMLText;\n\n        if (text._autoResolution)\n        {\n            text.onViewUpdate();\n        }\n    }\n\n    /** Destroys the BatchableHTMLText instance. Returns the texture promise to the renderer and cleans up references. */\n    public destroy()\n    {\n        const { htmlText } = this._renderer;\n\n        htmlText.getReferenceCount(this.currentKey) === null\n            ? htmlText.returnTexturePromise(this.texturePromise)\n            : htmlText.decreaseReferenceCount(this.currentKey);\n        this._renderer.runners.resolutionChange.remove(this);\n        this.texturePromise = null;\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateTextBounds } from '../text/utils/updateTextBounds';\nimport { BatchableHTMLText } from './BatchableHTMLText';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { HTMLText } from './HTMLText';\n\n/**\n * The HTMLTextPipe class is responsible for rendering HTML text.\n * @internal\n */\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText.styleKey;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText, instructionSet: InstructionSet)\n    {\n        const batchableHTMLText = this._getGpuText(htmlText);\n\n        if (htmlText._didTextUpdate)\n        {\n            const resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n\n            if (batchableHTMLText.currentKey !== htmlText.styleKey || htmlText.resolution !== resolution)\n            {\n                // If the text has changed, we need to update the GPU text\n                this._updateGpuText(htmlText).catch((e) =>\n                {\n                    console.error(e);\n                });\n            }\n\n            htmlText._didTextUpdate = false;\n\n            updateTextBounds(batchableHTMLText, htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableHTMLText, instructionSet);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const batchableHTMLText = this._getGpuText(htmlText);\n\n        batchableHTMLText._batcher.updateElement(batchableHTMLText);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n        const batchableHTMLText = this._getGpuText(htmlText);\n\n        if (batchableHTMLText.generatingTexture) return;\n\n        // We need to preserve the current texture and don't release it until the new texture is generated.\n        // It's necessary to ensure that the texture won't be captured by another field and overwritten with their\n        // content, while our texture is still in progress.\n        const oldTexturePromise = batchableHTMLText.texturePromise;\n\n        batchableHTMLText.texturePromise = null;\n\n        batchableHTMLText.generatingTexture = true;\n\n        htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n\n        let texturePromise = this._renderer.htmlText.getTexturePromise(htmlText);\n\n        if (oldTexturePromise)\n        {\n            // Release old texture after new one is generated.\n            texturePromise = texturePromise.finally(() =>\n            {\n                this._renderer.htmlText.decreaseReferenceCount(batchableHTMLText.currentKey);\n                this._renderer.htmlText.returnTexturePromise(oldTexturePromise);\n            });\n        }\n\n        batchableHTMLText.texturePromise = texturePromise;\n        batchableHTMLText.currentKey = htmlText.styleKey;\n\n        batchableHTMLText.texture = await texturePromise;\n\n        // need a rerender...\n        const renderGroup = htmlText.renderGroup || htmlText.parentRenderGroup;\n\n        if (renderGroup)\n        {\n            // need a rebuild of the render group\n            renderGroup.structureDidChange = true;\n        }\n\n        batchableHTMLText.generatingTexture = false;\n\n        updateTextBounds(batchableHTMLText, htmlText);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return htmlText._gpuData[this._renderer.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const batchableHTMLText = new BatchableHTMLText(this._renderer);\n\n        batchableHTMLText.renderable = htmlText;\n        batchableHTMLText.transform = htmlText.groupTransform;\n        batchableHTMLText.texture = Texture.EMPTY;\n        batchableHTMLText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableHTMLText.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n        htmlText._gpuData[this._renderer.uid] = batchableHTMLText;\n\n        return batchableHTMLText;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n    }\n}\n\n","/* eslint-disable no-restricted-globals */\nimport { DOMAdapter } from '../../environment/adapter';\nimport { type ImageLike } from '../../environment/ImageLike';\n\nimport type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\n/** @internal */\nconst nssvg = 'http://www.w3.org/2000/svg';\n/** @internal */\nconst nsxhtml = 'http://www.w3.org/1999/xhtml';\n\n/** @internal */\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image: ImageLike;\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n\n        this.image = DOMAdapter.get().createImage();\n    }\n\n    public destroy(): void\n    {\n        this.svgRoot.remove();\n        this.foreignObject.remove();\n        this.styleElement.remove();\n        this.domElement.remove();\n        this.image.src = '';\n        this.image.remove();\n\n        this.svgRoot = null;\n        this.foreignObject = null;\n        this.styleElement = null;\n        this.domElement = null;\n        this.image = null;\n        this.canvasAndContext = null;\n    }\n}\n","import { loadFontAsBase64 } from './loadFontAsBase64';\n\n/**\n * Options for the font CSS style\n * @category text\n * @internal\n */\nexport interface FontCSSStyleOptions\n{\n    /**\n     * The font family to use in the CSS\n     * @example\n     * 'Arial' or ['Arial', 'Helvetica']\n     */\n    fontFamily: string | string[]\n    /**\n     * The font weight to use in the CSS\n     * @example\n     * 'normal', 'bold', '100', '200', etc.\n     */\n    fontWeight: string\n    /**\n     * The font style to use in the CSS\n     * @example\n     * 'normal', 'italic', 'oblique'\n     */\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n * @internal\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n        src: url('${dataSrc}');\n    }`;\n}\n","import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n * @internal\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n","import { Cache } from '../../../assets/cache/Cache';\nimport { type FontFaceCache } from '../../../assets/loader/parsers/loadWebFont';\nimport { loadFontCSS } from './loadFontCSS';\n\n/** @internal */\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @returns - The css string\n * @internal\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { entries } = Cache.get<FontFaceCache>(`${fontFamily}-and-url`);\n                const promises: Promise<string>[] = [];\n\n                entries.forEach((entry) =>\n                {\n                    const url = entry.url;\n                    const faces = entry.faces;\n\n                    const out = faces.map((face) => ({ weight: face.weight, style: face.style }));\n\n                    // load each out font with the correct style\n                    promises.push(\n                        ...out.map((style) =>\n                            loadFontCSS(\n                                {\n                                    fontWeight: style.weight,\n                                    fontStyle: style.style,\n                                    fontFamily,\n                                },\n                                url,\n                            ),\n                        ),\n                    );\n                });\n                FontStylePromiseCache.set(\n                    fontFamily,\n                    Promise.all(promises).then((css) => css.join('\\n')),\n                );\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n","/* eslint-disable no-restricted-globals */\nimport { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n * @internal\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData ||= tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    // padding is included in the CSS calculation, so we need to remove it here\n    const doublePadding = style.padding * 2;\n\n    return {\n        width: contentBounds.width - doublePadding,\n        height: contentBounds.height - doublePadding,\n    };\n}\n","import { type ImageLike } from '../../environment/ImageLike';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { type CanvasAndContext, CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type TextureStyle } from '../../rendering/renderers/shared/texture/TextureStyle';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { type HTMLTextStyle } from './HTMLTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLText, HTMLTextOptions } from './HTMLText';\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @category rendering\n * @advanced\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    private readonly _activeTextures: Record<string, {\n        texture: Texture,\n        usageCount: number,\n        promise: Promise<Texture>,\n    }> = {};\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    /**\n     * @param options\n     * @deprecated Use getTexturePromise instead\n     */\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this.getTexturePromise(options);\n    }\n\n    /**\n     * Increases the reference count for a texture.\n     * @param text - The HTMLText instance associated with the texture.\n     */\n    public getManagedTexture(text: HTMLText): Promise<Texture>\n    {\n        const textKey = text.styleKey;\n\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].promise;\n        }\n\n        const promise = this._buildTexturePromise(text)\n            .then((texture) =>\n            {\n                this._activeTextures[textKey].texture = texture;\n\n                return texture;\n            });\n\n        this._activeTextures[textKey] = {\n            texture: null,\n            promise,\n            usageCount: 1,\n        };\n\n        return promise;\n    }\n\n    /**\n     * Gets the current reference count for a texture associated with a text key.\n     * @param textKey - The unique key identifying the text style configuration\n     * @returns The number of Text instances currently using this texture\n     */\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey]?.usageCount ?? null;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    /**\n     * Decreases the reference count for a texture.\n     * If the count reaches zero, the texture is cleaned up.\n     * @param textKey - The key associated with the HTMLText instance.\n     */\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        if (!activeTexture) return;\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            if (activeTexture.texture)\n            {\n                this._cleanUp(activeTexture.texture);\n            }\n            else\n            {\n                // we did not resolve...\n                activeTexture.promise.then((texture) =>\n                {\n                    activeTexture.texture = texture;\n\n                    this._cleanUp(activeTexture.texture);\n                }).catch(() =>\n                {\n                    // #if _DEBUG\n                    warn('HTMLTextSystem: Failed to clean texture');\n                    // #endif\n                });\n            }\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    /**\n     * Returns a promise that resolves to a texture for the given HTMLText options.\n     * @param options - The options for the HTMLText.\n     * @returns A promise that resolves to a Texture.\n     */\n    public getTexturePromise(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(options);\n    }\n\n    private async _buildTexturePromise(options: HTMLTextOptions)\n    {\n        const { text, style, resolution, textureStyle } = options as {\n            text: string,\n            style: HTMLTextStyle,\n            resolution: number,\n            textureStyle?: TextureStyle,\n        };\n\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(fontFamilies);\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        // this off set will ensure we don't get any UV bleeding!\n        const uvSafeOffset = 2;\n\n        image.width = (width | 0) + uvSafeOffset;\n        image.height = (height | 0) + uvSafeOffset;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        const resource: ImageLike | HTMLCanvasElement = image;\n        let canvasAndContext: CanvasAndContext;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(canvasAndContext ? canvasAndContext.canvas : resource,\n            image.width - uvSafeOffset,\n            image.height - uvSafeOffset,\n            resolution\n        );\n\n        if (textureStyle) texture.source.style = textureStyle;\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    public returnTexturePromise(texturePromise: Promise<Texture>)\n    {\n        texturePromise.then((texture) =>\n        {\n            this._cleanUp(texture);\n        }).catch(() =>\n        {\n            // #if _DEBUG\n            warn('HTMLTextSystem: Failed to clean texture');\n            // #endif\n        });\n    }\n\n    private _cleanUp(texture: Texture)\n    {\n        TexturePool.returnTexture(texture, true);\n        texture.source.resource = null;\n        texture.source.uploadMethodId = 'unknown';\n    }\n\n    public destroy()\n    {\n        // BOOM!\n        (this._renderer as null) = null;\n        for (const key in this._activeTextures)\n        {\n            if (this._activeTextures[key]) this.returnTexturePromise(this._activeTextures[key].promise);\n        }\n        (this._activeTextures as null) = null;\n    }\n}\n","import type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n * @internal\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n","import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n * @internal\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n","import { type ImageLike } from '../../../environment/ImageLike';\n\n/**\n * This function loads an SVG image into an IImage element.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n * @internal\n */\nexport function loadSVGImage(image: ImageLike, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n","import { DOMAdapter } from '../../environment/adapter';\n\n/**\n * Checks if the current browser is Safari.\n * @returns {boolean} True if the browser is Safari, false otherwise.\n * @internal\n */\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n","import { type ImageLike } from '../../../environment/ImageLike';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\nimport type { CanvasAndContext } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * Remember to return this canvas is immediately to the CanvasPool for reuse when you are done with it.\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n * @internal\n */\nexport function getTemporaryCanvasFromImage(image: ImageLike, resolution: number): CanvasAndContext\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas.\n    return canvasAndContext;\n}\n\n","import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { type BatchableSprite } from '../../sprite/BatchableSprite';\nimport { type AbstractText } from '../AbstractText';\nimport { type TextStyle, type TextStyleOptions } from '../TextStyle';\n\n/**\n * Updates the bounds of the given batchable sprite based on the provided text object.\n *\n * This function adjusts the bounds of the batchable sprite to match the dimensions\n * and anchor point of the text's texture. Additionally, it compensates for any padding\n * specified in the text's style to ensure the text is rendered correctly on screen.\n * @param {BatchableSprite} batchableSprite - The sprite whose bounds need to be updated.\n * @param {AbstractText} text - The text object containing the texture and style information.\n * @internal\n */\nexport function updateTextBounds(batchableSprite: BatchableSprite, text: AbstractText<TextStyle, TextStyleOptions>)\n{\n    const { texture, bounds } = batchableSprite;\n    const padding = text._style._getFinalPadding();\n\n    // When HTML text textures are created, they include the padding around the text content\n    // to prevent text clipping and provide a buffer zone. This padding is built into\n    // the texture itself. However, we don't want this padding to affect the text's\n    // actual position on screen.\n\n    // First, calculate bounds using the full padded texture\n    updateQuadBounds(bounds, text._anchor, texture);\n\n    // Then adjust by the padding amount to compensate for the buffer zone\n    // This shifts the render position back by the padding amount, ensuring the text\n    // appears exactly where intended while maintaining the buffer zone around it.\n    const paddingOffset = text._anchor._x * padding * 2;\n    const paddingOffsetY = text._anchor._y * padding * 2;\n\n    bounds.minX -= padding - paddingOffset;\n    bounds.minY -= padding - paddingOffsetY;\n    bounds.maxX -= padding - paddingOffset;\n    bounds.maxY -= padding - paddingOffsetY;\n}\n","/**\n * @param rgb\n * @param alpha\n * @param out\n * @param offset\n * @internal\n */\nexport function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\n/**\n * @param abgr\n * @param out\n * @param offset\n * @internal\n */\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @category scene\n * @advanced\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. If not provided, they will be filled with 0 and match the size of the positions. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @category scene\n * @advanced\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n\n        let uvs = options.uvs;\n\n        if (!uvs)\n        {\n            if (options.positions)\n            {\n                uvs = new Float32Array(positions.length);\n            }\n            else\n            {\n                uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n            }\n        }\n\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    /**\n     * Set the positions of the mesh.\n     * When setting the positions, its important that the uvs array is at least as long as the positions array.\n     * otherwise the geometry will not be valid.\n     * @param {Float32Array} value - The positions of the mesh.\n     */\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    /**\n     * Set the UVs of the mesh.\n     * Its important that the uvs array you set is at least as long as the positions array.\n     * otherwise the geometry will not be valid.\n     * @param {Float32Array} value - The UVs of the mesh.\n     */\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n"],"names":["localUniformBit","name","vertex","header","main","end","localUniformBitGroup2","_objectSpread","replace","localUniformBitGl","tilingBit","fragment","tilingBitGl","gpuProgram","glProgram","TilingSpriteShader","Shader","constructor","compileHighShaderGpuProgram","bits","roundPixelsBit","compileHighShaderGlProgram","roundPixelsBitGl","tilingUniforms","UniformGroup","uMapCoord","value","Matrix","type","uClampFrame","Float32Array","uClampOffset","uTextureTransform","uSizeAnchor","resources","localUniforms","uTransformMatrix","uColor","uRound","uTexture","Texture","EMPTY","source","uSampler","style","updateUniforms","width","height","matrix","anchorX","anchorY","texture","this","textureWidth","textureHeight","textureMatrix","uniforms","set","a","b","c","d","tx","ty","invert","mapCoord","QuadGeometry","MeshGeometry","positions","uvs","indices","Uint32Array","sharedQuad","TilingSpriteGpuData","canBatch","geometry","slice","destroy","_this$shader","shader","TilingSpritePipe","renderer","_state","State","default2d","_renderer","validateRenderable","renderable","tilingSpriteData","_getTilingSpriteData","couldBatch","_updateCanBatch","batchableMesh","_batcher","checkAndUpdateTexture","addRenderable","tilingSprite","instructionSet","batcher","renderPipes","batch","BatchableMesh","didViewUpdate","_updateBatchableMesh","transform","groupTransform","setTexture","_texture","roundPixels","_roundPixels","addToBatch","break","updateRenderable","add","execute","groups","globalUniforms","bindGroup","color32BitToUniform","groupColorAlpha","blendMode","getAdjustedBlendModeBlend","groupBlendMode","_source","encoder","draw","state","updateElement","_tileTransform","anchor","x","y","_gpuData","uid","_initTilingSpriteData","gpuData","renderableData","addressMode","update","frame","applyAnchorToTexture","shared","copyFrom","scale","array","stride","offset","index","size","length","applyMatrix","setUvs","setPositions","_nonPowOf2wrapping","RendererType","WEBGL","context","supports","nonPowOf2wrapping","isSimple","isPowerOfTwo","extension","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","extensions","batcherName","packAsQuad","indexOffset","attributeOffset","_batch","_textureMatrixUpdateId","_uvUpdateId","topology","_topology","reset","uvBuffer","getBuffer","data","transformedUvs","_transformedUvs","_updateID","multiplyUvs","color","attributeSize","indexSize","blendModeIds","normal","multiply","screen","overlay","erase","min","max","_State","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","concat","for2d","ResizePlugin","init","options","Object","defineProperty","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","window","innerWidth","innerHeight","clientWidth","clientHeight","render","resizeTo","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","UPDATE_PRIORITY","LOW","stop","start","Ticker","oldTicker","BatchableSprite","_attributeStart","bounds","GraphicsGpuData","batches","batched","forEach","BigPool","return","GraphicsPipe","adaptor","_adaptor","runners","contextChange","graphics","wasBatched","gpuContext","graphicsContext","updateGpuContext","isBatchable","_rebuild","_addToBatcher","_getGpuDataForRenderable","i","isRenderable","getGpuContext","customShader","_updateBatchesForRenderable","batchPipe","_initGpuDataForRenderable","map","batchClone","BatchableGraphics","copyTo","GraphicsContextSystem","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","maxTextures","uDistance","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","batchSamplers","getBatchSamplersUniformGroup","AbstractBitmapFont","EventEmitter","arguments","chars","create","lineHeight","fontFamily","fontMetrics","fontSize","ascent","descent","baseLineOffset","distanceField","range","pages","applyFillAsTint","baseMeasurementFontSize","baseRenderedFontSize","font","deprecation","v8_0_0","pageTextures","distanceFieldRange","distanceFieldType","destroyTextures","undefined","emit","removeAllListeners","_this$chars$i$texture","page","_DynamicBitmapFont","_dynamicOptions$skipK","_dynamicOptions$resol","_dynamicOptions$paddi","resolution","_padding","_measureCache","_currentChars","_currentX","_currentY","_currentMaxCharHeight","_currentPageIndex","_skipKerning","dynamicOptions","defaultOptions","_textureSize","textureSize","_mipmap","mipmap","clone","overrideFill","_fill","alpha","WHITE","fill","requestedFontSize","fontStringFromTextStyle","overrideSize","_stroke","_style","skipKerning","padding","textureStyle","_textureStyle","TextureStyle","CanvasTextMetrics","measureFont","ensureCharacters","charList","graphemeSegmenter","filter","char","includes","self","indexOf","pageData","_nextPage","canvas","canvasAndContext","textureSource","currentX","currentY","currentMaxCharHeight","fontScale","skipTexture","maxTextureWidth","maxTextureHeight","_style$dropShadow$dis","_style$dropShadow","_style$_stroke$width","_style$_stroke","metrics","measureText","paddedWidth","Math","ceil","fontStyle","paddedHeight","pageData2","xAdvance","dropShadow","distance","id","codePointAt","xOffset","yOffset","kerning","_drawGlyph","px","py","Rectangle","_applyKerning","newChars","measureCache","first","j","second","c1","c2","total","amount","textureResolution","CanvasPool","getOptimalCanvasAndContext","_setupContext","ImageSource","resource","alphaMode","autoGenerateMipmaps","_stroke$width","textBaseline","stroke","strokeThickness","lineWidth","lineJoin","join","miterLimit","strokeStyle","getCanvasFillStyle","fillStyle","shadowOptions","rgb","Color","setValue","toArray","dropShadowBlur","blur","dropShadowDistance","shadowColor","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","_stroke$width2","text","fontProperties","removeShadow","strokeText","fillText","super","returnCanvasAndContext","TextStyle","DynamicBitmapFont","getBitmapTextLayout","trimEnd","layoutData","offsetY","lines","charPositions","spaceWidth","spacesIndex","currentLine","previousChar","firstWord","currentWord","spaceWord","adjustedLetterSpacing","letterSpacing","adjustedWordWrapWidth","wordWrapWidth","adjustedLineHeight","breakWords","wordWrap","nextWord","word","position","push","nextLine","lastChar","checkIsOverflow","isEnd","charData","test","nextCharWidth","align","measurementData","line","alignCenter","alignRight","indy","spaceIndex","totalSpaces","alignJustify","fontCount","BitmapFontManager","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","lru","getFont","_dynamicFont$ensureCh","fontFamilyKey","styleKey","Cache","has","styleCopy","fnt","warn","once","dynamicFont","call","getLayout","bitmapFont","install","_options","_options$dynamicFill","_ref","_ref2","_ref3","_ref4","Error","textStyle","dynamicFill","_canUseTintForStyle","flatChars","result","item","Array","isArray","startCode","charCodeAt","endCode","i2","j2","String","fromCharCode","from","resolveCharacters","uninstall","cacheKey","BitmapTextGraphics","Graphics","BitmapTextPipe","bitmapText","graphicsRenderable","_getGpuBitmapText","syncWithProxy","_didTextUpdate","_updateContext","_updateDistanceField","proxyGraphics","clear","limits","maxBatchableTextures","bitmapTextLayout","translate","_anchor","_x","_y","tint","linePositionYShift","round","orig","initGpuText","proxyRenderable","dx","sqrt","dy","worldScale","abs","container","proxy","groupColor","globalDisplayStatus","localDisplayStatus","groupAlpha","BatchableText","resolutionChange","_autoResolution","onViewUpdate","canvasText","getReferenceCount","currentKey","decreaseReferenceCount","returnTexture","CanvasTextPipe","gpuText","_getGpuText","newKey","batchableText","_updateGpuText","_resolution","getManagedTexture","updateTextBounds","minX","maxX","minY","maxY","CanvasTextSystem","_activeTextures","getTexture","_textKey","_options$resolution","CanvasTextGenerator","getCanvasAndContext","getPo2TextureFromSource","trim","pad","updateUvs","filters","filteredTexture","_applyFilters","initSource","uploadMethodId","TexturePool","renderTextToCanvas","textKey","_increaseReferenceCount","usageCount","activeTexture","_this$_activeTextures","_this$_activeTextures2","currentRenderTarget","renderTarget","resultTexture","generateFilteredTexture","bind","key","WebGLSystem","WebGPUSystem","CanvasSystem","MeshGpuData","MeshPipe","localUniformsBindGroup","BindGroup","mesh","meshData","_getMeshData","isBatched","_geometry","vertexSize","_getBatchableMesh","_mesh$_geometry$indic","_mesh$_geometry$posit","gpuBatchableMesh","_a","_b","_initMeshData","_initBatchableMesh","gpuMesh","tempBounds","Bounds","image","getOptimalTexture","_PlaneGeometry","verticesX","verticesY","build","_this$verticesX","_this$verticesY","_this$width","_this$height","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","indexBuffer","PlaneGeometry","_NineSliceGeometry","_options$width","_options$height","_options$originalWidt","_options$originalHeig","_options$leftWidth","_options$rightWidth","_options$topHeight","_options$bottomHeight","_options$anchor","_options$anchor2","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","_anchorX","_anchorY","updatePositions","p","w","scaleW","h","scaleH","anchorOffsetX","anchorOffsetY","_uvw","_uvh","NineSliceGeometry","NineSliceSpriteGpuData","NineSliceSpritePipe","sprite","gpuSprite","_getGpuSprite","_updateBatchableSprite","batchableSprite","_initGPUSprite","FilterPipe","filterEffect","renderPipeId","canBundle","action","pop","_filterEffect","_container","instruction","tempProjectionMatrix","quadGeometry","Geometry","attributes","aPosition","buffer","format","FilterData","skip","inputTexture","backTexture","blendRequired","outputRenderSurface","globalFrame","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","uInputSize","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","activeBackTexture","_this$_activeFilterDa","_activeFilterData","filterData","_pushFilterData","renderSurface","colorTextureSource","colorTexture","rootResolution","rootAntialias","antialias","_calculateFilterArea","_calculateFilterBounds","rootViewPort","previousFilterData","_getPreviousFilterData","globalResolution","_findFilterResolution","offsetX","_calculateGlobalFrame","_setupFilterTextures","addRect","rectangle","finishRenderPass","_applyFiltersToTexture","outputTexture","_popFilterData","getBackTexture","lastRenderSurface","previousBounds","backgroundResolution","floor","copyToTexture","applyFilter","input","output","isFinalTarget","rootRenderTarget","_findPreviousFilterOffset","_updateFilterUniforms","_setupBindGroupsAndRender","calculateSpriteMatrix","outputMatrix","mappedMatrix","worldTransform","renderGroup","parentRenderGroup","cacheToLocalTransform","prepend","uniformBatch","batchUniforms","getUboResource","setResource","getRenderTarget","sourceWidth","sourceHeight","outputFrame","inputSize","inputPixel","inputClamp","pixelWidth","pixelHeight","rootTexture","isRoot","currentIndex","lastIndex","prevFilterData","renderables","actualMatrix","_renderable$renderGro","isCachedAsTexture","textureOffsetInverseTransform","append","_parentCacheAsTextureRenderGroup","inverseWorldTransform","addBounds","getGlobalRenderableBounds","filterArea","getFastGlobalBounds","filterFrameTransform","apply","flip","tempTexture","flop","t","viewPort","paddingMultiplier","Infinity","enabled","clipToViewport","_renderer$backBuffer$","_renderer$backBuffer","compatibleRenderers","backBuffer","useBackBuffer","fitBounds","isPositive","GlParticleContainerAdaptor","particleContainerPipe","defaultShader","gl","getBuffers","glType","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","createIndicesForQuads","outBuffer","totalIndices","Uint16Array","generateUpdateFunction","properties","dynamic","funcFragments","property","code","getAttributeInfoFromFormat","unshift","functionSource","Function","ParticleBuffer","_options$size","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","dynamicOffset","staticOffset","_staticBuffer","Buffer","label","shrinkToFit","usage","BufferUsage","VERTEX","COPY_DST","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","particles","uploadStatic","setDataWithSize","byteLength","float32View","uint32View","ParticleShader","GlProgram","GpuProgram","wgsl","entryPoint","uTranslationMatrix","uResolution","ParticleContainerPipe","_renderable","_initBuffer","_properties","children","_childrenDirty","transformationMatrix","globalUniformData","projectionMatrix","GlParticleContainerPipe","GpuParticleContainerAdaptor","getUniformBindGroup","getTextureBindGroup","GpuParticleContainerPipe","BatchableHTMLText","generatingTexture","htmlText","returnTexturePromise","texturePromise","HTMLTextPipe","batchableHTMLText","catch","e","console","error","oldTexturePromise","getTexturePromise","finally","structureDidChange","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","setAttribute","overflow","appendChild","DOMAdapter","createImage","src","loadFontCSS","url","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","onerror","readAsDataURL","loadFontAsBase64","fontWeight","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_createCanvas","WEBGPU","promise","_buildTexturePromise","then","_cleanUp","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","split","tagStyles","extractFontFamilies","fontCSS","fontPromises","entries","promises","entry","out","faces","face","weight","all","css","getFontCss","measured","fontStyleCSS","htmlTextRenderData","innerHTML","cssStyle","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","svgURL","XMLSerializer","serializeToString","getSVGUrl","delay","async","resolve2","setTimeout","onload","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","isSafari","clearRect","drawImage","getTemporaryCanvasFromImage","_getFinalPadding","updateQuadBounds","paddingOffset","paddingOffsetY","abgr","_MeshGeometry","shrinkBuffersToFit","aUV","INDEX","batchMode"],"sourceRoot":""}